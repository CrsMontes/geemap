{"code": "var collection = ee.ImageCollection(\"projects/sat-io/open-datasets/NOAA/ccap_10m\");\nvar collection30 = ee.ImageCollection(\"projects/sat-io/open-datasets/NOAA/ccap_30m\")\n\n//uncomment line 5 to switch to 30m\n//collection = collection30\n\n//Function to set date string as property for aggregation\nfunction dtstr(image){\n  var dt = ee.String(ee.Date(image.get('system:time_start')).format('YYYY-MM-dd'))\n  var ed = ee.String(ee.Date(image.get('system:time_end')).format('YYYY-MM-dd'))\n  return image.copyProperties(image, ['system:time_start','system:time_end'])\n  .set('start-date',dt).set('end-date',ed).set('date-range',dt.cat('-').cat(ed))\n}\n\nprint(collection.map(dtstr).aggregate_histogram('date-range'))\n\nvar collection = collection.filterDate('2010-01-01','2022-01-01')\n\nvar image = collection.mosaic()\nimage = image.mask(image.gt(0))\n\n// Define a dictionary which will be used to make legend and visualize image on map\nvar dict = {\n  \"names\": [\n    \"Unclassified (Cloud,Shadow etc)\",//1\n    \"Impervious\",//2\n    \"Developed Open Space\",//3\n    \"Developed Open Space\",//4\n    \"Developed Open Space\",//5\n    \"Cultivated Land\",//6\n    \"Pasture/Hay\",//7\n    \"Grassland/Herbaceous\",//8\n    \"Deciduous Forest\",//9\n    \"Evergreen Forest\",//10\n    \"Mixed Forest\",//11\n    \"Scrub/Shrub\",//12\n    \"Palustrine Forested Wetland\",//13\n    \"Palustrine Scrub/Shrub Wetland\",//14\n    \"Palustrine Emergent Wetland\",//15\n    \"Estuarine Forested Wetland\",//16\n    \"Estuarine Scrub/Shrub Wetland\",//17\n    \"Estuarine Emergent Wetland\",//18\n    \"Unconsolidated Shore\",//19\n    \"Bare Land\",//20\n    \"Open Water\",//21\n    \"Palustrine Aquatic Bed\",//22\n    \"Estuarine Aquatic Bed\",//23\n    \"Tundra\",//24\n    \"Snow/Ice\"//25\n  ],\n  \"colors\": [\n    \"#000000\",\n    \"#f2f2f2\",\n    \"#a899a8\",\n    \"#8e757c\",\n    \"#c1cc38\",\n    \"#542100\",\n    \"#c1a04f\",\n    \"#f2ba87\",\n    \"#00f200\",\n    \"#003a00\",\n    \"#07a03a\",\n    \"#6d6d00\",\n    \"#005b5b\",\n    \"#f26d00\",\n    \"#f200f2\",\n    \"#3d003d\",\n    \"#6d006d\",\n    \"#af00af\",\n    \"#00f2f2\",\n    \"#f2f200\",\n    \"#000077\",\n    \"#0000f2\",\n    \"#161616\",\n    \"#161616\",\n    \"#191919\",\n  ]};\n\n// Create a panel to hold the legend widget\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n\n// Function to generate the legend\nfunction addCategoricalLegend(panel, dict, title) {\n  \n  // Create and add the legend title.\n  var legendTitle = ui.Label({\n    value: title,\n    style: {\n      fontWeight: 'bold',\n      fontSize: '18px',\n      margin: '0 0 4px 0',\n      padding: '0'\n    }\n  });\n  panel.add(legendTitle);\n  \n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\n  panel.add(loading);\n  \n  // Creates and styles 1 row of the legend.\n  var makeRow = function(color, name) {\n    // Create the label that is actually the colored box.\n    var colorBox = ui.Label({\n      style: {\n        backgroundColor: color,\n        // Use padding to give the box height and width.\n        padding: '8px',\n        margin: '0 0 4px 0'\n      }\n    });\n  \n    // Create the label filled with the description text.\n    var description = ui.Label({\n      value: name,\n      style: {margin: '0 0 4px 6px'}\n    });\n  \n    return ui.Panel({\n      widgets: [colorBox, description],\n      layout: ui.Panel.Layout.Flow('horizontal')\n    });\n  };\n  \n  // Get the list of palette colors and class names from the image.\n  var palette = dict['colors'];\n  var names = dict['names'];\n  loading.style().set('shown', false);\n  \n  for (var i = 0; i \u003c names.length; i++) {\n    panel.add(makeRow(palette[i], names[i]));\n  }\n  \n  Map.add(panel);\n  \n}\n\n\n/*\n  // Display map and legend ///////////////////////////////////////////////////////////////////////////////\n*/\n\n// Add the legend to the map\naddCategoricalLegend(legend, dict, 'Land cover');\n\n// Add LC image to the map\nMap.addLayer(image, {min:1, max:25, palette:dict['colors']}, 'C-CAP LC Beta')\n\nMap.setCenter(-91.588,30.21,8)", "environment": "[]", "location": "268.41200000000003,30.21,8"}