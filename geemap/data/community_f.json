{"7592ab36de453d718aab7291692abb88": "var palettes = require('users/samapriya/utils:palettes');\r\n\r\n// Add the elevation to the map.  Play with the visualization tools\r\n// to get a better visualization.\r\nMap.addLayer(GDEM, {}, 'elev', false);\r\n\r\n// Use the terrain algorithms to compute a hillshade with 8-bit values.\r\nvar shade = ee.Terrain.hillshade(GDEM);\r\nMap.addLayer(shade, {}, 'hillshade', false);\r\n\r\n// Create an \"ocean\" variable to be used for cartographic purposes\r\nvar ocean = GDEM.lte(0);\r\nMap.addLayer(ocean.mask(ocean), {palette:'000022'}, 'ocean', false);\r\n\r\n// Use these visualization parameters, customized by location.\r\nvar visParams = {min: 1, max: 3000, palette: palettes.extra.blkred};\r\n\r\n// Create a mosaic of the ocean and the elevation data\r\nvar visualized = ee.ImageCollection([\r\n  // Mask the elevation to get only land\r\n  GDEM.mask(ocean.not()).visualize(visParams), \r\n  // Use the ocean mask directly to display ocean.\r\n  ocean.mask(ocean).visualize({palette:'000022'})\r\n]).mosaic();\r\n\r\n// Note that the visualization image doesn't require visualization parameters.\r\nMap.addLayer(visualized.clip(countries), {}, 'ASTER GDEM');", "52693ef5d22167a7283fb4e9da60f11f": "//Import module to set map style\nvar style = require('users/gena/packages:style')\n\n//3 class only with land removed\nvar palette = [\"0d3ce2\",\"4075e7\",\"50B2C4\"]\n\n//Mask out land and add water bodies only\nMap.addLayer(ASTWBD.updateMask(ASTWBD.gte(1)),{min:1,max:3,palette:palette},'ASTER Global Water Bodies Database (ASTWBD) Version 1')\nstyle.SetMapStyleGrey()", "75ab868ddbf11372285c4bc009655f1d": "var palettes = require('users/samapriya/utils:palettes');\r\n\r\nMap.addLayer(ee.Image(gdp_per_capita.select('b1')),{min:1600,max:50000,palette: palettes.extra.blkred},'GDP Per Capita 1990-2015')\r\nMap.addLayer(ee.Image(gdp_ppp.select('b1')),{min:-347969610,max:411755463,palette: palettes.extra.orngblue},'GDP PPP 1990-2015')\r\nMap.addLayer(ee.Image(hdi.select('b1')),{min:0.2,max:0.8,palette: palettes.extra.orngblue},'HDI')\r\n\r\n\r\n\r\n\r\n", "2b6f1aaf0b2acbf74a06144ed26ad606": "var palettes = require('users/gena/packages:palettes');\n\nMap.addLayer(ksat.first().multiply(0.0001),{min:2,max:415,palette:palettes.cmocean.Delta[7]},'ksat')\nMap.addLayer(satfield.first().multiply(0.0001),{min:0.25,max:0.55,palette:palettes.cmocean.Haline[7]},'sat-field',false)\nMap.addLayer(N.first().multiply(0.0001),{min:1,max:1.5,palette:palettes.cmocean.Thermal[7]},'N',false)\nMap.addLayer(alpha.first().multiply(0.0001),{min:0.006,max:0.074,palette:palettes.cmocean.Solar[7]},'alpha',false)\nMap.addLayer(wilt_perm.first().multiply(0.0001),{min:0.04,max:0.14,palette:palettes.cmocean.Gray[7]},'Perm-wilt',false)\nMap.addLayer(field_wilt.first().multiply(0.0001),{min:0.02,max:0.27,palette:palettes.cmocean.Oxy[7]},'field-wilt',false)\nMap.addLayer(ormc.first().multiply(0.0001),{min:0.48,max:14,palette:palettes.cmocean.Deep[7]},'ormc',false)\nMap.addLayer(stc.first().multiply(0.0001),{min:0.0003,max:0.0006,palette:palettes.cmocean.Haline[7]},'stc',false)\nMap.addLayer(wcavail.first().multiply(0.0001),{min:0.132,max:0.353,palette:palettes.cmocean.Dense[7]},'wcavail',false)\nMap.addLayer(wcpf2.first().multiply(0.0001),{min:0.25,max:0.55,palette:palettes.cmocean.Algae[7]},'wcpf2',false)\nMap.addLayer(wcpf3.first().multiply(0.0001),{min:0.10,max:0.327,palette:palettes.cmocean.Delta[7]},'wcfp3',false)\nMap.addLayer(wcpf4_2.first().multiply(0.0001),{min:0.05,max:0.19,palette:palettes.cmocean.Haline[7]},'wcpf4_2',false)", "9d8642769f76a2b79f192cd7df4a2183": "var Slope_avg_vis = {'max': 500, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Regularly_flooded_shrub_herbaceous_vegetation_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Herbaceous_vegetation_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Evergreen_deciduous_needleleaf_trees_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Mixed_other_trees_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Urban_builtup_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Elevation_range_vis = {'max': 3000, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Shrubs_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Cultivated_and_managed_vegetation_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Stream_length_sum_vis = {'max': 500, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 1}\r\nvar Open_water_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Precambrian_surface_lithology_wsum_vis = {'max': 40, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Evergreen_broadleaf_trees_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Precipitation_seasonality_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Annual_air_temperature_range_avg_vis = {'max': 500, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 76}\r\nvar Elevation_avg_vis = {'max': 3000, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Mean_annual_air_temperature_avg_vis = {'max': 300, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Catchment_size_sum_vis = {'max': 5000, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 1}\r\nvar Annual_sum_of_precipitation_avg_vis = {'max': 20000000, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Barren_lands_sparse_vegetation_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Deciduous_broadleaf_trees_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Slope_range_vis = {'max': 500, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Snow_ice_avg_vis = {'max': 100, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\nvar Quaternary_surface_lithology_wsum_vis = {'max': 40, 'palette': 'ffffff,0000ff,00ff00,ff0000', 'min': 0}\r\n\r\n//Add a few layers\r\nMap.addLayer(annual_sum_of_precipitation_avg,Annual_sum_of_precipitation_avg_vis,'Precipitation Seasonality Avg')\r\nMap.addLayer(barren_lands_sparse_vegetation_avg,Barren_lands_sparse_vegetation_avg_vis,'Barren Lands Sparse Vegetation Avg')\r\nMap.addLayer(stream_length_sum,Stream_length_sum_vis,'Stream Length Sum')\r\nMap.addLayer(slope_range,Slope_range_vis,'Slope Range')\r\n\r\n", "820a54b5b6b02c6367e142aa206bf78c": "print('Top readings',top.size())\nprint('Bottom readings',bottom.size()) \n\nMap.centerObject(top.first(),7)\nMap.addLayer(top)\n\n// Define the chart and print it to the console.\nvar chart =\n    ui.Chart.feature\n        .histogram({features: top, property: 'value', maxBuckets: 50})\n        .setOptions({\n          title: 'Top temp',\n          hAxis: {\n            title: 'Top temp (C)',\n            titleTextStyle: {italic: false, bold: true}\n          },\n          vAxis: {\n            title: 'Observation count',\n            titleTextStyle: {italic: false, bold: true}\n          },\n          colors: ['1d6b99'],\n          legend: {position: 'none'}\n        });\nprint(chart);\n\n// Define the chart and print it to the console.\nvar chart =\n    ui.Chart.feature\n        .histogram({features: bottom, property: 'value', maxBuckets: 50})\n        .setOptions({\n          title: 'Bottom temp',\n          hAxis: {\n            title: 'Bottom temp (C)',\n            titleTextStyle: {italic: false, bold: true}\n          },\n          vAxis: {\n            title: 'Observation count',\n            titleTextStyle: {italic: false, bold: true}\n          },\n          colors: ['1d6b99'],\n          legend: {position: 'none'}\n        });\nprint(chart);", "f43b787ef6890302b01e7f87e40dd8e2": "print('Total Features',argo.size())\nprint('Distinct Platform Id: ',argo.aggregate_count_distinct('pid'))\n\nMap.addLayer(argo,{},'Argo Float Subset')\n", "b162248aa8a2495648f10baed01e7ef3": "//Import palette\nvar palettes = require('users/gena/packages:palettes')\n\n// Topographic\nMap.addLayer(elevation.first().mask(elevation.first().neq(32767)),{'min':2,'max':174,palette: palettes.cmocean.Amp[7]},'Elevation')\nMap.addLayer(aspect.first().mask(aspect.first().neq(32767)),{'min':2,'max':3500,palette: palettes.cmocean.Haline[7]},'Aspect')\n", "8fc9d2e3531ba32b895332b575e6cc04": "var bare_surface = ee.Image('users/geocis/BareSurfaces/BS_1980_2019');\r\nvar bare_frequency = ee.Image('users/geocis/BareSurfaces/BF_1980_2019');\r\n\r\n//Import palette\r\nvar palettes = require('users/gena/packages:palettes')\r\n\r\nMap.setCenter(0,0,3);\r\nMap.addLayer(bare_surface,{bands: ['red', 'green', 'blue'], min: 500, max: 3500, gamma: 1.25},'Bare Surface')\r\nMap.addLayer(bare_frequency.divide(ee.Number(100)),{min: 0, max:100, palette: palettes.matplotlib.magma[7]},'Bare Surface Frequency')", "897fe233f179e611d1cec8ade96942c3": "var Urban_Built_up_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Regularly_Flooded_Vegetation_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Herbaceous_Vegetation_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Snow_Ice_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Cultivated_and_Managed_Vegetation_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Evergreen_Deciduous_Needleleaf_Trees_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Deciduous_Broadleaf_Trees_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Mixed_Other_Trees_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Shrubs_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Barren_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Open_Water_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\nvar Evergreen_Broadleaf_Trees_vis = {'opacity': 0.6, 'max': 100, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 1}\n\nMap.addLayer(urban_built_up.updateMask(urban_built_up.gt(0)),Urban_Built_up_vis,'Urban Built up')\nMap.addLayer(herbaceous_vegetation.updateMask(herbaceous_vegetation.gt(0)),Herbaceous_Vegetation_vis,'Herbaceous Vegetation')\nMap.addLayer(evergreen_deciduous_needleleaf_trees.updateMask(evergreen_deciduous_needleleaf_trees.gt(0)),Evergreen_Deciduous_Needleleaf_Trees_vis,'Evergreen Decidious Needleleaf Trees')", "76c6cbf1f4c837f48ae6d080b15e1666": "//Import palette\r\nvar palettes = require('users/gena/packages:palettes')\r\n\r\nMap.addLayer(bps,{'min':11,'max':2235,palette: palettes.cmocean.Oxy[7]},'Biophysical Setting')\r\nMap.addLayer(evc,{'min':11,'max':356,palette: palettes.colorbrewer.YlGnBu[8]},'Existing Vegetation Cover')\r\nMap.addLayer(evh,{'min':11,'max':301,palette: palettes.colorbrewer.RdYlGn[8]},'Existing Vegetation Height')\r\nMap.addLayer(evt,{'min':7067,'max':9038,palette: palettes.cmocean.Matter[7]},'Existing Vegetation Type')\r\nMap.addLayer(nvc,{'min':6060,'max':8913,palette: palettes.cmocean.Speed[7]},'National Vegetation Classification')", "6618d200de937bb5b0325235d52d690f": "var sand_mean = ee.Image('projects/soilgrids-isric/sand_mean')\r\n//print example image metadata and description\r\nprint(sand_mean)\r\n\r\n//Add all layer to Map\r\nMap.addLayer(sand_mean.select('sand_0-5cm_mean'),{min: 50, max: 1000,palette: ['5d5851','635a4b','6a5b44','715c3d','785e36','7e5f30','856129','8c6222','92641c','996515','a0660e','a66808','ad6901']},'SoilGrids250m 2.0 - Sand content ISRIC_0_5cm')\r\n\r\n//Set basemap to Hybrid view\r\nMap.setOptions('HYBRID')", "d3441d23c1b2840948e026f51edd5bc9": "//Center Map to Kenya\nMap.setCenter(38.214, 0.677,6)\n\n// //Add Binary Masks\nMap.addLayer(togo_cropland_binary, binary_vis,'Togo Cropland Binary');\nMap.addLayer(busia_cropland_binary, binary_vis,'Busia Cropland Binary');\nMap.addLayer(kenya_cropland_binary, binary_vis, 'Kenya Cropland Binary')\n\n// //Add Cropland Probability Masks\n// Map.addLayer(bahia_cropmask_probability, prob_vis,'Bahia Coffee Cropmask Probability');\nMap.addLayer(busia_cropland_probability, prob_vis,'Busia Cropland Probability');\nMap.addLayer(kenya_cropland_probability, prob_vis,'Kenya Cropland Probability');\nMap.addLayer(togo_cropland_probability,prob_vis,'Togo Cropland Probability')\n\nMap.setOptions('HYBRID')", "2661b87b5fb16598cfdb4b1ba510617d": "print(imageCollection.size())\nprint('City List',imageCollection.aggregate_histogram('city'))\n\n//multiband mask\nvar masked = function(image) {\n  var b1 = image.select(['b1']);\n  var b2 = image.select(['b2']);\n  var b3 = image.select(['b3']);\n  \n  var maskb1 = b1.eq(0);\n  var maskb2 = b2.eq(0);\n  var maskb3 = b3.eq(0);\n  \n  var mask = maskb1.and(maskb2)\n  .and(maskb3)\n  .rename('cmask');\n  \n  //Invert mask\n  return image.addBands(mask)\n  .updateMask(mask.unmask().not());\n};\n\nMap.setCenter(-117.18910446862611,32.76908678504577,12)\nMap.addLayer(imageCollection.map(masked).mosaic())\n", "f8f1636a5ae3b0b03715c805ec436f67": "Map.setCenter(-95.3592289208674,29.744084242227128,11)\r\n\r\n//Import palette\r\nvar palettes = require('users/samapriya/utils:palettes');\r\n\r\nMap.addLayer(CCAP_IMP30,{min:-12,max:60,palette:palettes.extra.blue_silver},'CCAP 30m Impervious')\r\n", "e7180cf756bdb8593c479f0da91e8118": "var collection = ee.ImageCollection(\"projects/sat-io/open-datasets/NOAA/ccap_10m\");\nvar collection30 = ee.ImageCollection(\"projects/sat-io/open-datasets/NOAA/ccap_30m\")\n\n//uncomment line 5 to switch to 30m\n//collection = collection30\n\n//Function to set date string as property for aggregation\nfunction dtstr(image){\n  var dt = ee.String(ee.Date(image.get('system:time_start')).format('YYYY-MM-dd'))\n  var ed = ee.String(ee.Date(image.get('system:time_end')).format('YYYY-MM-dd'))\n  return image.copyProperties(image, ['system:time_start','system:time_end'])\n  .set('start-date',dt).set('end-date',ed).set('date-range',dt.cat('-').cat(ed))\n}\n\nprint(collection.map(dtstr).aggregate_histogram('date-range'))\n\nvar collection = collection.filterDate('2010-01-01','2022-01-01')\n\nvar image = collection.mosaic()\nimage = image.mask(image.gt(0))\n\n// Define a dictionary which will be used to make legend and visualize image on map\nvar dict = {\n  \"names\": [\n    \"Unclassified (Cloud,Shadow etc)\",//1\n    \"Impervious\",//2\n    \"Developed Open Space\",//3\n    \"Developed Open Space\",//4\n    \"Developed Open Space\",//5\n    \"Cultivated Land\",//6\n    \"Pasture/Hay\",//7\n    \"Grassland/Herbaceous\",//8\n    \"Deciduous Forest\",//9\n    \"Evergreen Forest\",//10\n    \"Mixed Forest\",//11\n    \"Scrub/Shrub\",//12\n    \"Palustrine Forested Wetland\",//13\n    \"Palustrine Scrub/Shrub Wetland\",//14\n    \"Palustrine Emergent Wetland\",//15\n    \"Estuarine Forested Wetland\",//16\n    \"Estuarine Scrub/Shrub Wetland\",//17\n    \"Estuarine Emergent Wetland\",//18\n    \"Unconsolidated Shore\",//19\n    \"Bare Land\",//20\n    \"Open Water\",//21\n    \"Palustrine Aquatic Bed\",//22\n    \"Estuarine Aquatic Bed\",//23\n    \"Tundra\",//24\n    \"Snow/Ice\"//25\n  ],\n  \"colors\": [\n    \"#000000\",\n    \"#f2f2f2\",\n    \"#a899a8\",\n    \"#8e757c\",\n    \"#c1cc38\",\n    \"#542100\",\n    \"#c1a04f\",\n    \"#f2ba87\",\n    \"#00f200\",\n    \"#003a00\",\n    \"#07a03a\",\n    \"#6d6d00\",\n    \"#005b5b\",\n    \"#f26d00\",\n    \"#f200f2\",\n    \"#3d003d\",\n    \"#6d006d\",\n    \"#af00af\",\n    \"#00f2f2\",\n    \"#f2f200\",\n    \"#000077\",\n    \"#0000f2\",\n    \"#161616\",\n    \"#161616\",\n    \"#191919\",\n  ]};\n\n// Create a panel to hold the legend widget\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n\n// Function to generate the legend\nfunction addCategoricalLegend(panel, dict, title) {\n  \n  // Create and add the legend title.\n  var legendTitle = ui.Label({\n    value: title,\n    style: {\n      fontWeight: 'bold',\n      fontSize: '18px',\n      margin: '0 0 4px 0',\n      padding: '0'\n    }\n  });\n  panel.add(legendTitle);\n  \n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\n  panel.add(loading);\n  \n  // Creates and styles 1 row of the legend.\n  var makeRow = function(color, name) {\n    // Create the label that is actually the colored box.\n    var colorBox = ui.Label({\n      style: {\n        backgroundColor: color,\n        // Use padding to give the box height and width.\n        padding: '8px',\n        margin: '0 0 4px 0'\n      }\n    });\n  \n    // Create the label filled with the description text.\n    var description = ui.Label({\n      value: name,\n      style: {margin: '0 0 4px 6px'}\n    });\n  \n    return ui.Panel({\n      widgets: [colorBox, description],\n      layout: ui.Panel.Layout.Flow('horizontal')\n    });\n  };\n  \n  // Get the list of palette colors and class names from the image.\n  var palette = dict['colors'];\n  var names = dict['names'];\n  loading.style().set('shown', false);\n  \n  for (var i = 0; i < names.length; i++) {\n    panel.add(makeRow(palette[i], names[i]));\n  }\n  \n  Map.add(panel);\n  \n}\n\n\n/*\n  // Display map and legend ///////////////////////////////////////////////////////////////////////////////\n*/\n\n// Add the legend to the map\naddCategoricalLegend(legend, dict, 'Land cover');\n\n// Add LC image to the map\nMap.addLayer(image, {min:1, max:25, palette:dict['colors']}, 'C-CAP LC Beta')\n\nMap.setCenter(-91.588,30.21,8)", "c16cd4e019e7e44e3c66924f8fba0677": "\r\nMap.setCenter(-95.3592289208674,29.744084242227128,11)\r\n\r\n//Import palette\r\nvar palettes = require('users/samapriya/utils:palettes');\r\n\r\nMap.addLayer(ccap_wetland_potential.mask(ccap_wetland_potential.gt(0)),{min:1,max:10,palette:palettes.extra.marine},'CCAP Wetland Potential')\r\n", "e166302e9534c3ee55aec98d883221bd": "var palette = [\"#fcd6d2\",\"#faacb9\",\"#f768a1\",\"#cf298f\",\"#8c007a\",\"#49006b\"]\n\nvar eco_plt = ['#31572C','#3A0CA3','#CD5334','#4F772D','#4361EE','#FC9E4F','#90A955','#4CC9F0','#F2F3AE','#9D0610','#F9626C','#BD4EF9','#8207C5']\nMap.addLayer(ecosystem_13_class.updateMask(ecosystem_13_class.neq(128)),{'min':1,'max':13,'palette':eco_plt},'Ecosystem Extent 13 class')\n\n//Irrecoverable Carbon\nMap.addLayer(irrecoverable_carbon_2010,{'min':0,'max':120,'palette':palette},'Irrecoverable Carbon Soil 2010',false)\nMap.addLayer(irrecoverable_carbon_2018,{'min':0,'max':120,'palette':palette},'Irrecoverable Carbon Soil 2018',false)\n\n//Manageable Carbon\nMap.addLayer(manageable_carbon_2010,{'min':0,'max':120,'palette':palette},'Manageable Carbon Soil 2010',false)\nMap.addLayer(manageable_carbon_2018,{'min':0,'max':120,'palette':palette},'Manageable Carbon Soil 2018',false)\n\n//Vulnerable Carbon\nMap.addLayer(vulnerable_carbon_2010,{'min':0,'max':120,'palette':palette},'Vulnerable Carbon Soil 2010',false)\nMap.addLayer(vulnerable_carbon_2018,{'min':0,'max':120,'palette':palette},'Vulnerable Carbon Soil 2018',false)\n\n", "5d6ecc3a93350f9670f063b7f3c0fe6c": "// Define a dictionary which will be used to make legend and visualize image on map\r\nvar dict = {\r\n  \"names\": [\r\n    \"Water\",\r\n    \"Wetlands\",\r\n    \"Tree Canopy\",\r\n    \"Shrubland\",\r\n    \"Herbaceous Vegetation\",\r\n    \"Barren\",\r\n    \"Structures\",\r\n    \"Impervious Surfaces\",\r\n    \"Impervious Roads\",\r\n    \"Tree Canopy over Structures\",\r\n    \"Tree Canopy over Impervious Surfaces\",\r\n    \"Tree Canopy over Impervious Roads\",\r\n    \"Aberdeen Proving Ground\"\r\n  ],\r\n  \"colors\": [\r\n    \"00C5FF\",\r\n    \"00A884\",\r\n    \"267300\",\r\n    \"4CE600\",\r\n    \"A3FF73\",\r\n    \"FFAA00\",\r\n    \"FF0000\",\r\n    \"9C9C9C\",\r\n    \"000000\",\r\n    \"737300\",\r\n    \"E6E600\",\r\n    \"FFFF73\",\r\n    \"C500FF\",\r\n  ]};\r\n\r\n// Create a panel to hold the legend widget\r\nvar legend = ui.Panel({\r\n  style: {\r\n    position: 'bottom-left',\r\n    padding: '8px 15px'\r\n  }\r\n});\r\n\r\n// Function to generate the legend\r\nfunction addCategoricalLegend(panel, dict, title) {\r\n  \r\n  // Create and add the legend title.\r\n  var legendTitle = ui.Label({\r\n    value: title,\r\n    style: {\r\n      fontWeight: 'bold',\r\n      fontSize: '18px',\r\n      margin: '0 0 4px 0',\r\n      padding: '0'\r\n    }\r\n  });\r\n  panel.add(legendTitle);\r\n  \r\n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\r\n  panel.add(loading);\r\n  \r\n  // Creates and styles 1 row of the legend.\r\n  var makeRow = function(color, name) {\r\n    // Create the label that is actually the colored box.\r\n    var colorBox = ui.Label({\r\n      style: {\r\n        backgroundColor: color,\r\n        // Use padding to give the box height and width.\r\n        padding: '8px',\r\n        margin: '0 0 4px 0'\r\n      }\r\n    });\r\n  \r\n    // Create the label filled with the description text.\r\n    var description = ui.Label({\r\n      value: name,\r\n      style: {margin: '0 0 4px 6px'}\r\n    });\r\n  \r\n    return ui.Panel({\r\n      widgets: [colorBox, description],\r\n      layout: ui.Panel.Layout.Flow('horizontal')\r\n    });\r\n  };\r\n  \r\n  // Get the list of palette colors and class names from the image.\r\n  var palette = dict['colors'];\r\n  var names = dict['names'];\r\n  loading.style().set('shown', false);\r\n  \r\n  for (var i = 1; i < names.length; i++) {\r\n    panel.add(makeRow(palette[i], names[i]));\r\n  }\r\n  \r\n  Map.add(panel);\r\n  \r\n}\r\n\r\n\r\n/*\r\n  // Display map and legend ///////////////////////////////////////////////////////////////////////////////\r\n*/\r\n\r\n// Add the legend to the map\r\naddCategoricalLegend(legend, dict, 'Land cover');\r\n\r\n// Add LC image to the map\r\nMap.addLayer(cbay_20132014, {min:1, max:13, palette:dict['colors']}, 'Chesapeake Bay 2013-2014 LC')\r\n\r\n// Center the map on image\r\n//Map.setCenter(2.047, 45.346, 5)\r\n\r\nMap.centerObject(cbay_20132014,8)", "f1a7a341371b4a9a6ea441f2f307f323": "//Total count of number of scenario models for climate normals\r\nprint(cm_tmax.size())\r\n\r\n//Total count of emission scenarios per climate models and ensemble models\r\nprint('Total Emission Scenarios for indiviudual AOGCMs',cm_tmax.aggregate_count_distinct('emission_scenario'))\r\nprint('Total Emission Scenarios for AOGCMs ensemble',aogcm_ensemble_tmax.aggregate_count_distinct('emission_scenario'))\r\n\r\n//Total count of climate models for individual AOGCM models\r\nprint('Total individual AOGCMs',cm_tmax.aggregate_count_distinct('global_climate_model'))\r\n\r\nvar palettes = require('users/gena/packages:palettes');\r\n\r\n//Let's filter for and choose the same climate scenario for ensemble and individual models\r\naogcm_ensemble_tmax = aogcm_ensemble_tmax.filter(ee.Filter.eq('emission_scenario','SSP3-7.0')).filter(ee.Filter.date('2040-01-01', '2070-01-01'))\r\ncm_tmax = cm_tmax.filter(ee.Filter.eq('emission_scenario','SSP3-7.0')).filter(ee.Filter.date('2040-01-01', '2070-01-01'))\r\n\r\n//Add Tmax Normal, A single model and Ensemble\r\nMap.addLayer(cn_tmax.filter(ee.Filter.date('1990-01-01', '2070-01-01')).first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'Climate Normal Tmax')\r\nMap.addLayer(cm_tmax.filter(ee.Filter.eq('global_climate_model','GFDL-ESM4')).first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'GFDL-ESM4 Emission Scenario 3-7.0 Tmax')\r\nMap.addLayer(cm_tmax.filter(ee.Filter.eq('global_climate_model','CNRM-ESM2-1')).first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'CNRM-ESM2-1 Emission Scenario 3-7.0 Tmax')\r\nMap.addLayer(cm_tmax.filter(ee.Filter.eq('global_climate_model','EC-Earth3')).first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'EC-Earth3 Emission Scenario 3-7.0 Tmax')\r\nMap.addLayer(cm_tmax.filter(ee.Filter.eq('global_climate_model','GISS-E2-1-G')).first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'GISS-E2-1-G Emission Scenario 3-7.0 Tmax')\r\nMap.addLayer(cm_tmax.filter(ee.Filter.eq('global_climate_model','MIROC6')).first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'MIROC6 Emission Scenario 3-7.0 Tmax')\r\nMap.addLayer(cm_tmax.filter(ee.Filter.eq('global_climate_model','MPI-ESM1-2-HR')).first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'MPI-ESM1-2-HR Emission Scenario 3-7.0 Tmax')\r\nMap.addLayer(cm_tmax.filter(ee.Filter.eq('global_climate_model','MRI-ESM2-0')).first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'MRI-ESM2-0 Emission Scenario 3-7.0 Tmax')\r\nMap.addLayer(cm_tmax.filter(ee.Filter.eq('global_climate_model','UKESM1-0-LL')).first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'UKESM1-0-LL Emission Scenario 3-7.0 Tmax')\r\nMap.addLayer(cm_tmax.filter(ee.Filter.eq('global_climate_model','ACCESS-ESM1-5')).first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'ACCESS-ESM1-5 Emission Scenario 3-7.0 Tmax')\r\nMap.addLayer(aogcm_ensemble_tmax.first(),{min:-8,max:40,palette:palettes.cmocean.Balance[7]},'AOGCM Ensemble Model Emission Scenario 3-7.0 Tmax')", "0f08660af8efc2087de1da68b5ae53b4": "//Filter climate models by model and bioclimatic variable name\r\nprint('Total climate variable of Model ACCESS_ESM1-5',climate_models_bioclim.filter(ee.Filter.eq('global_climate_model','ACCESS-ESM1-5')).size())\r\nprint('Total models with climate variables PPT_sm',climate_models_bioclim.filter(ee.Filter.eq('bioclim_variable','PPT_sm')).size())\r\n\r\n\r\n//or combine the filters\r\nprint('Total climate variables of type PPT_sm under model ACCESS-ESM1-5',climate_models_bioclim\r\n.filter(ee.Filter.eq('global_climate_model','ACCESS-ESM1-5'))\r\n.filter(ee.Filter.eq('bioclim_variable','PPT_sm'))\r\n.size()\r\n)\r\n\r\n//you can add scenario model as well and finally also filter by date range\r\nprint('Total climate variables of type PPT_sm under model ACCESS-ESM1-5',climate_models_bioclim\r\n.filter(ee.Filter.eq('global_climate_model','ACCESS-ESM1-5'))\r\n.filter(ee.Filter.eq('bioclim_variable','PPT_sm'))\r\n.filter(ee.Filter.eq('emission_scenario','SSP2-4.5'))\r\n.size()\r\n)\r\n\r\n//you can add scenario model as well and finally also filter by date range\r\nprint('Total climate variables of type PPT_sm under model ACCESS-ESM1-5',climate_models_bioclim\r\n.filter(ee.Filter.eq('global_climate_model','ACCESS-ESM1-5'))\r\n.filter(ee.Filter.eq('bioclim_variable','PPT_sm'))\r\n.filter(ee.Filter.eq('emission_scenario','SSP2-4.5'))\r\n.filter(ee.Filter.date('2071-01-01','2100-12-31'))\r\n.size()\r\n)\r\n\r\n/*\r\nEnsemble model can be filtered by emission scenario , date range and bioclimatic variable\r\nClimate Normals can be filtered by date range, and bioclimatic variables\r\n*/\r\n\r\nvar palettes = require('users/gena/packages:palettes');\r\n\r\nvar aogcm_ensemble_mat = aogcm_ensemble_bioclim.filter(ee.Filter.eq('emission_scenario','SSP3-7.0')).filter(ee.Filter.date('2040-01-01', '2070-01-01')).filter(ee.Filter.eq('bioclim_variable','MAT'))\r\nvar climate_models_mat = climate_models_bioclim.filter(ee.Filter.eq('emission_scenario','SSP3-7.0')).filter(ee.Filter.date('2040-01-01', '2070-01-01')).filter(ee.Filter.eq('bioclim_variable','MAT'))\r\nvar climate_normal_mat = climate_normals_bioclim.filter(ee.Filter.eq('bioclim_variable','MAT'))\r\nprint(climate_models_mat)\r\nprint(climate_normal_mat)\r\n\r\n//Add Tmax Normal, A single model and Ensemble\r\nMap.addLayer(aogcm_ensemble_mat.first(),{min:1.5,max:30,palette:palettes.cmocean.Balance[7]},'Ensemble Emission Scenario 3-7.0 Mean Annual Temp')\r\nMap.addLayer(climate_models_mat.first(),{min:-0.5,max:30,palette:palettes.cmocean.Balance[7]},'ACCESS-ESM1-5_ssp370_2041 Mean Annual Temp')\r\nMap.addLayer(climate_normal_mat.first(),{min:-2.5,max:28,palette:palettes.cmocean.Balance[7]},'Climate Normal Mean Annual Temp')", "bbf21c4acf7eede5140dd08fac8f913e": "print('Total CoNED TBDEM collection',tb_dem.size())\n\n//Function to attach nominal scale to collection\nvar scales = function(image){\n  var b1proj = image.select('b1').projection();\n  var b1scale = image.select('b1').projection().nominalScale();\nreturn image.set('scale',ee.Number(b1scale).round())\n}\n\nvar ns = tb_dem.map(scales)\n\n//print distribution of nominal scale across collection\nprint(ns.aggregate_histogram('scale'))\n\nvar tb_dem = tb_dem.mosaic().setDefaultProjection('EPSG:3857',null,1);\nvar tb_hillshade = ee.Terrain.hillshade(tb_dem);\nvar vis_params = {'palette':['#006994','#b2ff59', '002200', 'fff700', 'ab7634', 'c4d0ff', 'ffffff'], min: -50, max: 1000};\n\nMap.addLayer(tb_hillshade, {}, 'CoNED_TBDEM Hillshade',false);\nMap.addLayer(tb_dem, vis_params, 'CoNED_TBDEM');", "dc1de49163e171394f2cac9713ef90f9": "var cov_vis = {'max': 2000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Coefficient of Variation_1km'}\r\nvar ASM1km_vis = {'max': 10000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 300, 'title': 'Uniformity_1km'}\r\nvar std1km_vis = {'max': 800, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Standard deviation_1km'}\r\nvar ENT1km_vis = {'max': 38000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Entropy_1km'}\r\nvar range1km_vis = {'max': 3000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Range_1km'}\r\nvar COR1km_vis = {'max': 7000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Correlation_1km'}\r\nvar simpson1km_vis = {'max': 10000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 3000, 'title': 'Simpson_1km'}\r\nvar VAR1km_vis = {'max': 300000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Variance_1km'}\r\nvar pielou1km_vis = {'max': 10000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 5000, 'title': 'Pielou_1km'}\r\nvar shannon5km_vis = {'max': 35000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Shannon_5km'}\r\nvar HOM1km_vis = {'max': 10000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Homogeneity_1km'}\r\nvar DIS1km_vis = {'max': 70000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Dissimilarity_1km'}\r\nvar shannon1km_vis = {'max': 27000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Shannon_1km'}\r\nvar mean1km_vis = {'max': 8000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Mean_1km'}\r\nvar CON1km_vis = {'max': 400000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Contrast_1km'}\r\nvar MAX1km_vis = {'max': 8000, 'palette': 'FFFFFF,CE7E45,DF923D,F1B555,FCD163,99B718,74A901,66A000,529400,3E8601,207401,056201,004C00,023B01,012E01,011D01,011301', 'min': 0, 'title': 'Maximum_1km'}\r\n\r\nMap.addLayer(cov,cov_vis,'Coefficient of Variation_1km')\r\nMap.addLayer(contrast,CON1km_vis,'Contrast 1 km')\r\nMap.addLayer(corr,COR1km_vis,'Correlation 1 km')\r\nMap.addLayer(dissimilarity,DIS1km_vis,'Dissimilarity 1 km')\r\nMap.addLayer(entropy,ENT1km_vis,'Entropy 1 km')\r\nMap.addLayer(homogeneity,HOM1km_vis,'Homogeneity 1 km')\r\nMap.addLayer(maximum,MAX1km_vis,'Maximum 1 km')\r\nMap.addLayer(mean,mean1km_vis,'Mean 1 km')\r\nMap.addLayer(pielou,pielou1km_vis,'Pielou 1 km')\r\nMap.addLayer(shannon,shannon1km_vis,'Shannon 1 km')\r\nMap.addLayer(simpson,simpson1km_vis,'Simpson 1 km')\r\nMap.addLayer(sd,std1km_vis,'Standard Deviation 1 km')\r\nMap.addLayer(uniformity,ASM1km_vis,'Uniformity 1 km')\r\nMap.addLayer(variance,VAR1km_vis,'Variance 1 km')", "a39fcd4dd46185a8f7846c66b6efe63c": "Map.addLayer(ee.Image().paint(CGAZ_ADM2,0,3), {\"palette\":[\"#d73027\"]}, 'CGAZ_ADM2')\nMap.addLayer(ee.Image().paint(HPSCU_ADM2,0,3), {\"palette\":[\"#fc8d59\"]}, 'HPSCU_ADM2',false)\nMap.addLayer(ee.Image().paint(HPSCGS_ADM2,0,3), {\"palette\":[\"#b35806\"]}, 'HPSCGS_ADM2',false)\nMap.addLayer(ee.Image().paint(SSCU_ADM2,0,3), {\"palette\":[\"#01665e\"]}, 'SSCU_ADM2',false)\nMap.addLayer(ee.Image().paint(SSCGS_ADM2,0,3), {\"palette\":[\"#998ec3\"]}, 'SSCGS_ADM2',false)\nMap.addLayer(ee.Image().paint(CGAZ_ADM0,0,3), {\"palette\":[\"#542788\"]}, 'CGAZ_ADM0')", "1036fae2f580c7d644be300c3c2a043f": "var elc10 = imageCollection.mosaic()\n\n// Define a dictionary which will be used to make legend and visualize image on map\nvar dict = {\n  \"names\": [\n    \"Artificial land\", //1\n    \"Cropland\", //2\n    \"Woodland\", //3\n    \"Shrubland\",//4\n    \"Grassland\", //5\n    \"Bare land\", //6\n    \"Water\", //7\n    \"Wetland\",//8\n  ],\n  \"colors\": [\n    \"#CC0303\", \n    \"#CDB400\", \n    \"#235123\",\n    \"#B76124\", \n    \"#92AF1F\",\n    \"#F7E174\",\n    \"#2019A4\",\n    \"#AEC3D6\",\n  ]};\n\n// Create a panel to hold the legend widget\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n\n// Function to generate the legend\nfunction addCategoricalLegend(panel, dict, title) {\n  \n  // Create and add the legend title.\n  var legendTitle = ui.Label({\n    value: title,\n    style: {\n      fontWeight: 'bold',\n      fontSize: '18px',\n      margin: '0 0 4px 0',\n      padding: '0'\n    }\n  });\n  panel.add(legendTitle);\n  \n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\n  panel.add(loading);\n  \n  // Creates and styles 1 row of the legend.\n  var makeRow = function(color, name) {\n    // Create the label that is actually the colored box.\n    var colorBox = ui.Label({\n      style: {\n        backgroundColor: color,\n        // Use padding to give the box height and width.\n        padding: '8px',\n        margin: '0 0 4px 0'\n      }\n    });\n  \n    // Create the label filled with the description text.\n    var description = ui.Label({\n      value: name,\n      style: {margin: '0 0 4px 6px'}\n    });\n  \n    return ui.Panel({\n      widgets: [colorBox, description],\n      layout: ui.Panel.Layout.Flow('horizontal')\n    });\n  };\n  \n  // Get the list of palette colors and class names from the image.\n  var palette = dict['colors'];\n  var names = dict['names'];\n  loading.style().set('shown', false);\n  \n  for (var i = 0; i < names.length; i++) {\n    panel.add(makeRow(palette[i], names[i]));\n  }\n  \n  Map.add(panel);\n  \n}\n\n\n/*\n  // Display map and legend ///////////////////////////////////////////////////////////////////////////////\n*/\n\n// Add the legend to the map\naddCategoricalLegend(legend, dict, 'land cover');\n\n// Add ELC10 image to the map\nMap.addLayer(elc10, {min:1, max:8, palette:dict['colors']}, 'elc10')\n\n// Center the map on image\nMap.setCenter(2.047, 45.346, 5)", "f6479dc43ab9c13dd1cc9bd527cf0c01": "print('GLO-30 Collection size :',glo30.size())\n\n//Explanation on setting default Projection here https://twitter.com/jstnbraaten/status/1494038930643042309\nvar elev = glo30.mosaic().setDefaultProjection('EPSG:3857',null,30)\n\n//you can also use this incase you don't want to specify CRS\n//var elev = glo30.mosaic().setDefaultProjection(glo30.first().projection())\n\n\n// Create an \"ocean\" variable to be used for cartographic purposes\nvar ocean = elev.lte(0);\n\n// Create a custom elevation palette from hex strings.\nvar elevationPalette = ['006600', '002200', 'fff700', 'ab7634', 'c4d0ff', 'ffffff'];\n\n// Use these visualization parameters, customized by location.\nvar visParams = {min: 1, max: 3000, palette: elevationPalette};\n\n// Create a mosaic of the ocean and the elevation data\nvar visualized = ee.ImageCollection([\n  // Mask the elevation to get only land\n  elev.mask(ocean.not()).visualize(visParams), \n  // Use the ocean mask directly to display ocean.\n  ocean.mask(ocean).visualize({palette:'000022'})\n]).mosaic();\n\n// Note that the visualization image doesn't require visualization parameters.\nMap.addLayer(visualized.clip(countries), {}, 'elev palette');", "b9054b6d5c4d7de1a4af39ff307e73d7": "Map.centerObject(rge_alti5,6)\n\nMap.addLayer(rge_alti5, {}, 'elev', false);\n\n// Use the terrain algorithms to compute a hillshade with 8-bit values.\nvar shade = ee.Terrain.hillshade(rge_alti5);\nMap.addLayer(shade, {}, 'hillshade', false);\n\n// Create an \"ocean\" variable to be used for cartographic purposes\nvar ocean = rge_alti5.lte(0);\nMap.addLayer(ocean.mask(ocean), {palette:'000022'}, 'ocean', false);\n\n// Create a custom elevation palette from hex strings.\nvar elevationPalette = ['006600', '002200', 'fff700', 'ab7634', 'c4d0ff', 'ffffff'];\n// Use these visualization parameters, customized by location.\nvar visParams = {min: 1, max: 3000, palette: elevationPalette};\n\n// Create a mosaic of the ocean and the elevation data\nvar visualized = ee.ImageCollection([\n  // Mask the elevation to get only land\n  rge_alti5.mask(ocean.not()).visualize(visParams), \n  // Use the ocean mask directly to display ocean.\n  ocean.mask(ocean).visualize({palette:'000022'})\n]).mosaic();\n\n// Note that the visualization image doesn't require visualization parameters.\nMap.addLayer(visualized, {}, 'elev palette');", "d87964128fd461d5e64a3e564cfd925b": "//import modules\nvar palettes = require('users/samapriya/utils:palettes');\n\n//Remap logic\nvar from = [1, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104]\nvar to =   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80]\n\n//remapper function\nvar remapper = function(image){\n  image = image.remap(from, to)\n  return image.copyProperties(image, [\"system:time_start\"])\n}\n\n//Add first and last\nMap.addLayer(ee.Image(dea_lcv100.map(remapper).sort('system:time_start').first()),{\"palette\":palettes.landcover.lcss_l4_au,min:1,max:80},'LC 1988')\nMap.addLayer(ee.Image(dea_lcv100.map(remapper).sort('system:time_start',false).first()),{\"palette\":palettes.landcover.lcss_l4_au,min:1,max:80},'LC 2020')\n\n\nvar collection = dea_lcv100.map(remapper)\n  .map(function(image) {\n    var rgb = image.visualize({\"palette\":palettes.landcover.lcss_l4_au,min:1,max:80})\n    return rgb.set({label: ee.Date(image.get('system:time_start')).format(\"YYYY-MM-dd\")})\n  });\nprint(collection.size())\n\n// Animate the collection.\nvar vidParams = {\n  dimensions: 1024, // Max dim.\n  region: geometry,\n  framesPerSecond: 2,\n  crs: 'EPSG:3857',\n};\nprint(ui.Thumbnail(collection, vidParams));\n", "47f7d56aa50aad4c991f677cefdf5f11": "/*\nESA 10m World Cover Input Quality Dataset\n\nPer pixel quality indicator showing the quality of the Earth Observation (EO) input data. The layer is a\n3 band GeoTIFF with\n\u2022 Band 1: Number of Sentinel-1 GAMMA0 observations used in the classification workflow\n\u2022 Band 2: Number of Sentinel-2 L2A observations used in the classification workflow\n\u2022 Band 3 Percentage (0-100) of invalid S2 observations discarded in the classification workflow\n(after cloud and cloud shadow filtering).\nCombining Band 2 and Band 3 yields the total absolute number of valid Sentinel-2 L2A observations\nused in the classification workflow.\n*/\n\n//Count collection objects\nprint('ESA 10m Input Quality Collection size',iq.size())\n\n//Import palette\nvar palettes = require('users/gena/packages:palettes')\nvar vis_b1 = {\"bands\":[\"b1\"],\"min\":0,\"max\":174,palette: palettes.cmocean.Deep[7]};\nvar vis_b2 = {\"bands\":[\"b2\"],\"min\":0,\"max\":174,palette: palettes.cmocean.Haline[7]};\nvar vis_b3 = {\"bands\":[\"b3\"],\"min\":0,\"max\":100,palette: palettes.cmocean.Oxy[7]};\nvar vis_b23 = {\"bands\":[\"b23\"],\"min\":0,\"max\":140,palette: palettes.cmocean.Algae[7]};\n\n\nvar b1_mosaic = iq.select(['b2']).mosaic()\nvar b3_mosaic = iq.select(['b3']).mosaic()\nvar combined_mosaic = b1_mosaic.multiply(ee.Image.constant(100).subtract(b3_mosaic)).divide(100).round().rename('b23')\n\nMap.addLayer(iq.mosaic(),vis_b1,'Band 1 Input Quality: Number of Sentinel-1 GAMMA0 observations')\nMap.addLayer(iq.mosaic(),vis_b2,'Band 2 Input Quality: Number of Sentinel-2 L2A observations',false)\nMap.addLayer(iq.mosaic(),vis_b3,'Band 3 Input Quality: Percentage (0-100) of invalid S2 observations discarded')\nMap.addLayer(combined_mosaic,vis_b23,'Band 2 combined with Band 3 Input Quality: total absolute number of valid Sentinel-2 L2A observations',false)\n", "514a294747ee5e7a136372b7e947d7bc": "// Define a dictionary which will be used to make legend and visualize image on map\nvar dict = {\n  \"names\": [\n    \"Water\",\n    \"Trees\",\n    \"Grass\",\n    \"Flooded Vegetation\",\n    \"Crops\",\n    \"Scrub/Shrub\",\n    \"Built Area\",\n    \"Bare Ground\",\n    \"Snow/Ice\",\n    \"Clouds\"\n  ],\n  \"colors\": [\n    \"#1A5BAB\",\n    \"#358221\",\n    \"#A7D282\",\n    \"#87D19E\",\n    \"#FFDB5C\",\n    \"#EECFA8\",\n    \"#ED022A\",\n    \"#EDE9E4\",\n    \"#F2FAFF\",\n    \"#C8C8C8\"\n  ]};\n\n// Create a panel to hold the legend widget\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n\n// Function to generate the legend\nfunction addCategoricalLegend(panel, dict, title) {\n  \n  // Create and add the legend title.\n  var legendTitle = ui.Label({\n    value: title,\n    style: {\n      fontWeight: 'bold',\n      fontSize: '18px',\n      margin: '0 0 4px 0',\n      padding: '0'\n    }\n  });\n  panel.add(legendTitle);\n  \n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\n  panel.add(loading);\n  \n  // Creates and styles 1 row of the legend.\n  var makeRow = function(color, name) {\n    // Create the label that is actually the colored box.\n    var colorBox = ui.Label({\n      style: {\n        backgroundColor: color,\n        // Use padding to give the box height and width.\n        padding: '8px',\n        margin: '0 0 4px 0'\n      }\n    });\n  \n    // Create the label filled with the description text.\n    var description = ui.Label({\n      value: name,\n      style: {margin: '0 0 4px 6px'}\n    });\n  \n    return ui.Panel({\n      widgets: [colorBox, description],\n      layout: ui.Panel.Layout.Flow('horizontal')\n    });\n  };\n  \n  // Get the list of palette colors and class names from the image.\n  var palette = dict['colors'];\n  var names = dict['names'];\n  loading.style().set('shown', false);\n  \n  for (var i = 0; i < names.length; i++) {\n    panel.add(makeRow(palette[i], names[i]));\n  }\n  \n  Map.add(panel);\n  \n}\n\n\n/*\n  // Display map and legend ///////////////////////////////////////////////////////////////////////////////\n*/\n\n// Add the legend to the map\naddCategoricalLegend(legend, dict, 'ESRI 2020 Land Cover');\n\n// Add image to the map\nMap.addLayer(esri_lulc10.mosaic(), {min:1, max:10, palette:dict['colors']}, 'ESRI LULC 10m')\n", "126c172d63e7ce780596c8d26f06d384": "Map.addLayer(canopy_height, canopy_vis, 'Canopy top height');\r\nMap.addLayer(standard_deviation, sd_vis, 'Standard deviation');\r\n", "679d2b03fb371331f1823d7b0a51f9fd": "Map.centerObject(gmv_raster.first(),10)\n\n// Fire Regime\nMap.addLayer(gmv_raster,vis,'Medium Voltage Grid')\nMap.addLayer(gmv_vector,{},'Medium Voltage Grid: Vector')\n", "2dc9079800c2b160620a5277c8592da4": "Map.addLayer(AF_T1,{},'AF Tile 1',false)\nMap.addLayer(AN_T1,{},'Tile 1',false)\nMap.addLayer(AS_T1,{},'Tile 3',false)\nMap.addLayer(EU_T1,{},'Tile 6',false)\nMap.addLayer(NA_T1,{},'Tile 6',false)\nMap.addLayer(OC_T1,{},'Tile 6',false)\nMap.addLayer(SA_T1,{},'Tile 6',false)\n\nMap.addLayer(\n  AF_T1.style({\n    fillColor: '00000000',\n    color: '#d53e4f',\n  })\n);\n\nMap.addLayer(\n  AN_T1.style({\n    fillColor: '00000000',\n    color: '#fc8d59',\n  })\n);\nMap.addLayer(\n  AS_T1.style({\n    fillColor: '00000000',\n    color: '#fee08b',\n  })\n);\nMap.addLayer(\n  EU_T1.style({\n    fillColor: '00000000',\n    color: '#ffffbf',\n  })\n);\nMap.addLayer(\n  NA_T1.style({\n    fillColor: '00000000',\n    color: '#e6f598',\n  })\n);\nMap.addLayer(\n  OC_T1.style({\n    fillColor: '00000000',\n    color: '#99d594',\n  })\n);\n\nMap.addLayer(\n  SA_T1.style({\n    fillColor: '00000000',\n    color: '#3288bd',\n  })\n);\n", "2e4110a0e6769825650a1b98ec4cf38e": "print('FABDEM Collection size :',fabdem.size())\n\n//Explanation on setting default Projection here https://twitter.com/jstnbraaten/status/1494038930643042309\nvar elev = fabdem.mosaic().setDefaultProjection('EPSG:3857',null,30)\n\n//you can also use this incase you don't want to specify CRS\n//var elev = fabdem.mosaic().setDefaultProjection(glo30.first().projection())\n\n// Add the elevation to the map.  Play with the visualization tools\n// to get a better visualization.\nMap.addLayer(elev, {}, 'elev', false);\n\n// Use the terrain algorithms to compute a hillshade with 8-bit values.\nvar shade = ee.Terrain.hillshade(elev);\nMap.addLayer(shade, {}, 'hillshade', false);\n\n// Create an \"ocean\" variable to be used for cartographic purposes\nvar ocean = elev.lte(0);\nMap.addLayer(ocean.mask(ocean), {palette:'000022'}, 'ocean', false);\n\n// Create a custom elevation palette from hex strings.\nvar elevationPalette = ['006600', '002200', 'fff700', 'ab7634', 'c4d0ff', 'ffffff'];\n// Use these visualization parameters, customized by location.\nvar visParams = {min: 1, max: 3000, palette: elevationPalette};\n\n// Create a mosaic of the ocean and the elevation data\nvar visualized = ee.ImageCollection([\n  // Mask the elevation to get only land\n  elev.mask(ocean.not()).visualize(visParams), \n  // Use the ocean mask directly to display ocean.\n  ocean.mask(ocean).visualize({palette:'000022'})\n]).mosaic();\n\n// Note that the visualization image doesn't require visualization parameters.\nMap.addLayer(visualized.clip(countries), {}, 'elev palette');", "e4a9120382b0fdfb9c0a7e75405711ac": "//Import palette\r\nvar palettes = require('users/gena/packages:palettes')\r\n\r\n//Fuel\r\nMap.addLayer(ch.first(),{'min':11,'max':125,palette: palettes.cmocean.Oxy[7]},'Forest Canopy Height',false)\r\nMap.addLayer(cbh.first(),{'min':11,'max':125,palette: palettes.cmocean.Algae[7]},'Forest Canopy Base Height')\r\nMap.addLayer(cc.first(),{'min':11,'max':125,palette: palettes.cmocean.Algae[7]},'Forest Canopy Cover',false)\r\nMap.addLayer(cbd.first(),{'min':0,'max':20,palette: palettes.cmocean.Balance[7]},'Forest Canopy Bulk Density',false)\r\nMap.addLayer(fvc.first(),{'min':11,'max':125,palette: palettes.cmocean.Delta[7]},'Fuel Vegetation Cover')\r\nMap.addLayer(fvh.first(), {'min':11,'max':624,palette: palettes.cmocean.Curl[7]}, 'Fuel Vegetation Height',false)\r\nMap.addLayer(fvt.first(),{'min':11,'max':2940,palette: palettes.cmocean.Matter[7]},'Fuel Vegetation Type',false)\r\nMap.addLayer(fccs.first().mask(fccs.first().neq(-9999)),{'min':24,'max':175,palette: palettes.cmocean.Haline[7]},'Fuel Characteristic Classification System Fuelbeds')", "5b1706ec636eb864a273b0cef18a1786": "//Import palette\nvar palettes = require('users/gena/packages:palettes')\n\n//Disturbance Layers\nMap.addLayer(fdist.first(),{'min':0,'max':260,palette: palettes.cmocean.Deep[7]},'Fuel Disturbance')\nMap.addLayer(hdist.first(),{'min':0,'max':20078388,palette: palettes.cmocean.Haline[7]},'Historical Disturbance')\n", "c1ddba42c1a75fd43fe0d6a38046e0a4": "//Import palette\nvar palettes = require('users/gena/packages:palettes')\n\nvar elevationVis = {\n  min: -7000.0,\n  max: 3000.0,\n  palette: ['011de2', 'afafaf', '3603ff', 'fff477', 'b42109'],\n};\nMap.setCenter(-37.62, 25.8, 2);\nMap.addLayer(gebco_grid.median(), elevationVis, 'Elevation');\nMap.addLayer(gebco_sub_ice_topo.median(), {min:-7500,max:5000,palette: ['011de2', 'afafaf', '3603ff', 'fff477', 'b42109']},'Elevation Sub Ice Topo' );\nMap.addLayer(gebco_tid_grid,{'min':0,'max':70,palette: palettes.colorbrewer.RdYlBu[11]},'Elevation TID',false)", "1b440cac2b9e8cd3ece21f9a021cd3a3": "var palettes = require('users/samapriya/utils:palettes');\r\n\r\n// Use these visualization parameters, customized by location.\r\nvar visParams = {min: 1, max: 700, palette: palettes.extra.blkred};\r\n\r\n// Note that the visualization image doesn't require visualization parameters.\r\nMap.addLayer(globathy, visParams, 'ASTER GDEM');\r\nMap.addLayer(globathy_param,{},'GLOBathy Basic Param',false)", "2557707383c16bb212eeb7f358d753a8": "print('Grip4 Africa size',grip4_africa.size())\r\nprint('Grip4 Central South America size',grip4_central_south_america.size())\r\nprint('Grip4 North America size',grip4_north_america.size())\r\nprint('Grip4 Europe size',grip4_europe.size())\r\nprint('Grip4 Oceania size',grip4_oceania.size())\r\nprint('Grip4 South East Asia size',grip4_south_east_asia.size())\r\nprint('Grip4 Middle East Central Asia size',grip4_middle_east_central_asia.size())\r\n\r\nMap.addLayer(ee.FeatureCollection(grip4_africa).style({color: '413B3A',width:1}),{},'Grip4 Africa')\r\nMap.addLayer(ee.FeatureCollection(grip4_central_south_america).style({color: '413B3A',width:1}),{},'Grip4 Central South America')\r\nMap.addLayer(ee.FeatureCollection(grip4_north_america).style({color: '413B3A',width:1}),{},'Grip4 North America')\r\nMap.addLayer(ee.FeatureCollection(grip4_europe).style({color: '413B3A',width:1}),{},'Grip4 Europe')\r\nMap.addLayer(ee.FeatureCollection(grip4_oceania).style({color: '413B3A',width:1}),{},'Grip4 Oceania')\r\nMap.addLayer(ee.FeatureCollection(grip4_south_east_asia).style({color: '413B3A',width:1}),{},'Grip4 South East Asia')\r\nMap.addLayer(ee.FeatureCollection(grip4_middle_east_central_asia).style({color: '413B3A',width:1}),{},'Grip4 Middle East and Central Asia')\r\n\r\n\r\nMap.setOptions('TERRAIN')\r\n", "b2f8a05b881ab9f09df3b304d6801f4e": "print(gdis.size())\r\nMap.addLayer(gdis)\r\n\r\n", "3efd5e8c5f2f02e637cdbfeedd1d968b": "var palettes = require('users/gena/packages:palettes')\r\n\r\n//Center Map\r\nMap.setCenter(103.7557, 1.6986,10)\r\nprint('CTI collection size',cti.size())\r\nMap.addLayer(cti.median(), {min: -3, max: 6, palette: palettes.cmocean.Algae[7]}, 'Compound Topographic Index (CTI)')\r\n\r\nprint('TRI collection size',tri.size())\r\nMap.addLayer(tri.median(), {min: 0.2, max:22, palette: palettes.cmocean.Turbid[7]}, 'Terrain Ruggedness Index (TRI)')\r\n\r\nprint('Slope collection size',slope.size())\r\nMap.addLayer(slope.median(), {min: 0.2, max:25, palette: palettes.cmocean.Curl[7]}, 'Slope Median')\r\n\r\nvar SubtleGrayscale\r\n = \r\n[\r\n  {\r\n    \"featureType\": \"administrative\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": \"-100\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.province\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"landscape\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": 65\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": \"50\"\r\n      },\r\n      {\r\n        \"visibility\": \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": \"-100\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.highway\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.arterial\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"30\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.local\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"40\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"transit\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"visibility\": \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"hue\": \"#ffff00\"\r\n      },\r\n      {\r\n        \"lightness\": -25\r\n      },\r\n      {\r\n        \"saturation\": -97\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"labels\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": -25\r\n      },\r\n      {\r\n        \"saturation\": -100\r\n      }\r\n    ]\r\n  }\r\n]\r\nMap.setOptions('SubtleGrayscale', {SubtleGrayscale\r\n: SubtleGrayscale\r\n})\r\n", "2dfc4b537801e2430b14b8d6851564be": "//Import palette\nvar palettes = require('users/gena/packages:palettes')\n\n//Center Map\nMap.setCenter(91.1709, 29.3025,10)\n\n//Add Layers\nMap.addLayer(roughness.median(),{min: 0.01, max: 273.18, palette: palettes.cmocean.Turbid[7]},'Roughness')\nMap.addLayer(tpi.median(), {min:-10.49281, max: 14.10036, palette: palettes.cmocean.Oxy[7]}, 'Topographic Position Index (TPI)')\nMap.addLayer(vrm.median(),{min: 0.0000014, max: 0.044295, palette: palettes.cmocean.Matter[7]},'Vector Ruggedness Measure (VRM)')\nMap.addLayer(spi.median().log(),{min: -8.3011414, max: 5.60854, palette: palettes.cmocean.Dense[7]},'Stream Power Index (SPI)')", "ed75ecef7fcf94897b74ac56bfbb3f43": "demALOS = demALOS.select('AVE_DSM')\r\n\r\nvar paletteHand = ['023858', '006837', '1a9850', '66bd63', 'a6d96a', 'd9ef8b', 'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027'];\r\nvar vis = {min: 1, max: 150, palette: paletteHand}\r\n\r\nMap.addLayer(hand30_100.mosaic(), vis, 'HAND 100, 30m (~0.1km2)', true)\r\nMap.addLayer(hand30_1000, vis, 'HAND 1000, 30m (~1km2)', false)\r\nMap.addLayer(hand90_1000, vis, 'HAND 1000, 90m (~8km2)', false)\r\n\r\n// add styled\r\nvar utils = require('users/gena/packages:utils')\r\n\r\nfunction hillshade(image) {\r\n  var weight = 0.7\r\n  var extrusion = 5\r\n  var sunAzimuth = 315\r\n  var sunElevation = 35\r\n  var contrast = 0.1\r\n  var brightness = 0\r\n  var saturation = 0.85\r\n\r\n  return utils.hillshadeRGB(image, demALOS, weight, extrusion, sunAzimuth, sunElevation, contrast, brightness, saturation)\r\n}\r\n  \r\nMap.addLayer(hillshade(hand30_100.mosaic().visualize(vis)), {}, 'HAND 100, 30m (~0.1km2) hillshade', false)\r\nMap.addLayer(hillshade(hand30_1000.visualize(vis)), {}, 'HAND 1000, 30m (~1km2) hillshade', true)\r\nMap.addLayer(hillshade(hand90_1000.visualize(vis)), {}, 'HAND 1000, 90m (~8km2) hillshade', false)\r\n  \r\n// clip potential flooded areas\r\nvar palettes = require('users/gena/packages:palettes')\r\nvar bigFlood = hand30_1000.resample('bicubic').multiply(-1).unitScale(-15, -5).selfMask()\r\nMap.addLayer(bigFlood, { palette: palettes.cb.Blues[7] }, 'water', true, 0.5)\r\n", "04adb1bfeaf55b95bc2070edd228da73": "/*\r\n|Aridity Index Value|Climate Class|\r\n|:------------------|:------------|\r\n|<0.03              |Hyper Arid   |\r\n|0.03-0.2           |Arid         |\r\n|0.2-0.5            |Semi-Arid    |\r\n|0.5-0.65           |Dry sub-humid|\r\n|>0.65              |Humid        |\r\n*/\r\n\r\n\r\n//Import palette\r\nvar palettes = require('users/gena/packages:palettes')\r\n\r\n/*\r\nConvert back by multiplying by 10,000 [The Aridity Index values reported within the Global Aridity Index_ET0 geodataset\r\nhave been multiplied by a factor of 10,000 to derive and distribute the data as integers (with 4 decimal accuracy).\r\nThis multiplier has been used to increase the precision of the variable values without using decimals.]\r\n*/\r\n\r\nvar image = ee.Image(aridity_index.multiply(0.0001))\r\n// Define an SLD style of discrete intervals to apply to the image.\r\nvar sld_intervals =\r\n  '<RasterSymbolizer>' +\r\n    '<ColorMap type=\"intervals\" extended=\"false\" >' +\r\n      '<ColorMapEntry color=\"#0000ff\" quantity=\"0.03\" label=\"0-0.03\"/>' +\r\n      '<ColorMapEntry color=\"#00ff00\" quantity=\"0.21\" label=\"0.03-0.2\" />' +\r\n      '<ColorMapEntry color=\"#007f30\" quantity=\"0.51\" label=\"0.2-0.51\" />' +\r\n      '<ColorMapEntry color=\"#30b855\" quantity=\"0.65\" label=\"0.5-0.65\" />' +\r\n      '<ColorMapEntry color=\"#ff0000\" quantity=\"2.5\" label=\">0.66\" />' +\r\n    '</ColorMap>' +\r\n  '</RasterSymbolizer>';\r\n  \r\nMap.addLayer(image.sldStyle(sld_intervals),{},'Aridity index')\r\nMap.addLayer(image,{'min':0,'max':2.5,palette: palettes.cmocean.Haline[7]},'Aridity Index',false)", "65fd6cfd746e4a1dc13b1c2b5ed86d40": "\r\n// Import the GCN250 Images and rename bands\r\nvar GCN250_Average =  ee.Image(\"users/jaafarhadi/GCN250/GCN250Average\").select('b1').rename('average');\r\nvar GCN250_Dry =  ee.Image(\"users/jaafarhadi/GCN250/GCN250Dry\").select('b1').rename('dry');\r\nvar GCN250_Wet = ee.Image(\"users/jaafarhadi/GCN250/GCN250Wet\").select('b1').rename('wet');\r\n\r\n// visualize the Dry GCN dataset\r\nvar vis = {\r\n  min:40, \r\n  max:75, \r\n  palette: ['Red','SandyBrown','Yellow','LimeGreen', 'Blue','DarkBlue']\r\n  \r\n};\r\n\r\nMap.addLayer(GCN250_Dry, vis, 'CN Dry');\r\n\r\nMap.setCenter(17.93, 7.71, 2);\r\n\r\n\r\n\r\n", "69487e636785d5c440259f018b7b8ed6": "Map.centerObject(africa.first(),4)\n\nvar af_tmax = africa.filter(ee.Filter.eq('prop_type','tmax'))\nvar af_tmin = africa.filter(ee.Filter.eq('prop_type','tmin'))\n\nMap.addLayer(af_tmax.first().multiply(0.1),{min:16,max:40,palette:['#a50026','#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695'].reverse()},' Africa Surface Air Temp 1km Tmax')\nMap.addLayer(af_tmin.first().multiply(0.1),{min:2,max:30,palette:['#a50026','#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695'].reverse()},' Africa Surface Air Temp 1km Tmin')\n", "287d38f2aab08f8e01847092b7c36ffd": "print(global_cement.first())\n\nMap.addLayer(global_cement,{'color':'red'},'Global Cement Database')", "599f1159ef75427d407f4f464530c46b": "print(global_steel.first())\n\nMap.addLayer(global_steel,{'color':'red'},'Global Iron and Steel Database')", "20d059ee5819d2fbb7e0de398f70eb90": "var palettes = require('users/gena/packages:palettes');\r\n\r\nMap.addLayer(day_of_burn,{min:1,max:365,palette:palettes.cmocean.Thermal[7]},'Day of Burn')\r\nMap.addLayer(fire_speed,{min:1,max:200,palette:palettes.cmocean.Haline[7]},'Fire Speed')\r\nMap.addLayer(fire_line,{min:1,max:365,palette:palettes.cmocean.Solar[7]},'Fire Line')\r\nMap.addLayer(fire_direction,{min:1,max:7,palette:palettes.cmocean.Delta[7]},'Fire Speed')", "bfc8e17388e4d003f3ae8fd5753e4f72": "Map.addLayer(ignitions_2003)\r\nMap.addLayer(perimeter_2003)", "d6d6390f0a9eafdaeb9766022b64065e": "// Set visualization parameters. Adjust `quantity` for breakpoints.\r\nvar emissions_intervals =\r\n'<RasterSymbolizer>' +\r\n' <ColorMap type=\"intervals\" extended=\"false\" >' +\r\n    '<ColorMapEntry color=\"#f5e9ee\" quantity=\"0\" label=\"No Data\"/>' +\r\n    '<ColorMapEntry color=\"#f0d3df\" quantity=\"50\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#d8afbc\" quantity=\"100\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#d687a4\" quantity=\"175\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#c75d9d\" quantity=\"250\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#c72a80\" quantity=\"350\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#a62177\" quantity=\"450\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#96267e\" quantity=\"550\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#872782\" quantity=\"650\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#782b8a\" quantity=\"800\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#662d91\" quantity=\"1000\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#592a85\" quantity=\"1100\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#4c287a\" quantity=\"1300\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#402773\" quantity=\"1900\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#35256b\" quantity=\"2600\" label=\"Gross Emissions\"/>' +\r\n    '<ColorMapEntry color=\"#262260\" quantity=\"3652\" label=\"Gross Emissions\"/>' +\r\n  '</ColorMap>' +\r\n'</RasterSymbolizer>';\r\n\r\nvar removals_intervals =\r\n'<RasterSymbolizer>' +\r\n ' <ColorMap type=\"intervals\" extended=\"false\" >' +\r\n    '<ColorMapEntry color=\"#ffecaa\" quantity=\"0\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#ffe991\" quantity=\"15\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#fce479\" quantity=\"25\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#fcde5a\" quantity=\"35\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#fcdc3a\" quantity=\"45\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#f9d800\" quantity=\"55\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#e8d31b\" quantity=\"70\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#BAD12F\" quantity=\"90\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#bfc64e\" quantity=\"110\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#aac138\" quantity=\"130\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#96bc3e\" quantity=\"150\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#7ba53d\" quantity=\"190\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#629144\" quantity=\"250\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#4a8239\" quantity=\"380\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#307038\" quantity=\"700\" label=\"Gross Removals\"/>' +\r\n    '<ColorMapEntry color=\"#0e6030\" quantity=\"1500\" label=\"Gross Removals\"/>' +\r\n  '</ColorMap>' +\r\n'</RasterSymbolizer>';\r\n\r\nvar net_flux_intervals =\r\n'<RasterSymbolizer>' +\r\n' <ColorMap type=\"intervals\" extended=\"false\" >' +\r\n    '<ColorMapEntry color=\"#0e6030\" quantity=\"-1500\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#307038\" quantity=\"-700\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#4a8239\" quantity=\"-250\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#629144\" quantity=\"-180\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#7ba53d\" quantity=\"-150\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#b5bf28\" quantity=\"-120\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#BFC64E\" quantity=\"-100\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#94DE26\" quantity=\"-80\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#B1E717\" quantity=\"-70\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#cfed4f\" quantity=\"-50\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#fce479\" quantity=\"-30\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#ffe991\" quantity=\"-15\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#ffecaa\" quantity=\"35\" label=\"Net Flux\"/>' +\r\n    \r\n    '<ColorMapEntry color=\"#f0d3df\" quantity=\"60\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#d8afbc\" quantity=\"80\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#d687a4\" quantity=\"100\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#c75d9d\" quantity=\"150\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#c72a80\" quantity=\"200\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#a62177\" quantity=\"275\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#96267e\" quantity=\"350\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#872782\" quantity=\"500\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#782b8a\" quantity=\"700\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#662d91\" quantity=\"1000\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#4c287a\" quantity=\"1300\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#402773\" quantity=\"1900\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#35256b\" quantity=\"2600\" label=\"Net Flux\"/>' +\r\n    '<ColorMapEntry color=\"#262260\" quantity=\"3652\" label=\"Net Flux\"/>' +\r\n  '</ColorMap>' +\r\n'</RasterSymbolizer>';\r\n\r\n\r\n// Layers not displayed, just to get the pixel values with pixel inspector\r\nMap.addLayer(emissions, {}, 'Gross emissions values',false);\r\nMap.addLayer(removals, {}, 'Gross removals values',false);\r\nMap.addLayer(net_flux, {}, 'Net flux values',false);\r\n\r\n// Layers displayed\r\nMap.addLayer(emissions.sldStyle(emissions_intervals), {}, 'Gross emissions (Mg CO2e/ha between 2001 and 2020)');\r\nMap.addLayer(removals.sldStyle(removals_intervals), {}, 'Gross removals (Mg CO2e/ha between 2001 and 2020)');\r\nMap.addLayer(net_flux.sldStyle(net_flux_intervals), {}, 'Net flux (Mg CO2e/ha between 2001 and 2020)');", "e49f67214364657a53276752089a60a7": "print('Groundwater database size',groundwater.size())\nprint('Rivers database size',rivers.size())\nprint('Lakes database size',lakes_reservoir.size())\n\nMap.addLayer(groundwater,{'color':'red','opacity':0.5},'Ground Database')\nMap.addLayer(rivers,{'color':'blue','opacity':0.5},'Rivers Database')\nMap.addLayer(lakes_reservoir,{'color':'brown','opacity':0.5},'Lakes and Reservoirs Database')", "300ff48b6bc77713b051d33b3fae55b9": "print('Total Sites Nodes: Global Healthsites Mapping Project',node.size())\nprint('Total Sites Ways: Global Healthsites Mapping Project',way.size())\n\nMap.addLayer(node,{},'Global Healthsites Mapping Project: Nodes')\nMap.addLayer(way,{},'Global Healthsites Mapping Project: Ways')", "09c11e2bfe98a654cfb63cc88fb13e23": "// Load packages for basemap\nvar style = require('users/gena/packages:style')\n\nMap.addLayer(gisa.mosaic(),{},'GISA 1972-2019')\n\nstyle.SetMapStyleGrey()", "fc05547a9058948eae9b7782ee07cf22": "print('Global Landslide Catalog 1970-2019',glc.size())\nMap.addLayer(glc,{},'Landslide Catalog Events 1985-2016')", "34a8f7bc4a37260c0164768a1dfa673b": "var objects = ee.data.listAssets('projects/sat-io/open-datasets/MSBuildings')\r\nprint('Assets in MS Global Buildings Footprint Folder', objects['assets'])\r\n\r\nprint(ee.FeatureCollection('projects/sat-io/open-datasets/MSBuildings/Australia').size())\r\n\r\nvar feature = ee.FeatureCollection('projects/sat-io/open-datasets/MSBuildings/Australia')\r\nMap.centerObject(feature.first(),6)\r\nMap.addLayer(feature.style({fillColor: '00000000',color: 'FF5500'})),{},'Australia'", "61a2c6295e4ef37ffc17dd5e0dbbd396": "//import modules\nvar palettes = require('users/gena/packages:palettes')\n\nMap.setCenter(-61.9097, 9.9357,9)\nMap.addLayer(agb.mosaic(),{'min':0.5,'max':375,'palette':palettes.colorbrewer.YlGn[9]},'Aboveground mangrove biomass')\nMap.addLayer(hmax95.mosaic(),{'min':0.5,'max':52,'palette':palettes.colorbrewer.PiYG[9]},'Mangrove canopy maximum height')\nMap.addLayer(hba95.mosaic(),{'min':0.5,'max':33,'palette':palettes.colorbrewer.Reds[9]},'Mangrove basal-area weighted height')\nMap.addLayer(americas_tree,{},'North South America tree measurements')", "ded574858c353cac4df6652e14f501b2": "var gmw2007 = ee.FeatureCollection(\"projects/sat-io/open-datasets/GMW/GMW_2007_v2\");\nvar gmw2008 = ee.FeatureCollection(\"projects/sat-io/open-datasets/GMW/GMW_2008_v2\");\nvar gmw2009 = ee.FeatureCollection(\"projects/sat-io/open-datasets/GMW/GMW_2009_v2\");\nvar gmw2010 = ee.FeatureCollection(\"projects/sat-io/open-datasets/GMW/GMW_2010_v2\");\nvar gmw2015 = ee.FeatureCollection(\"projects/sat-io/open-datasets/GMW/GMW_2015_v2\");\nvar gmw2016 = ee.FeatureCollection(\"projects/sat-io/open-datasets/GMW/GMW_2016_v2\");\nvar gmw1996 = ee.FeatureCollection(\"projects/sat-io/open-datasets/GMW/GMW_1996_v2\");\n\nMap.addLayer(ee.Image().paint(gmw1996,0,3), {\"palette\":[\"228B22\"]}, 'Global Mangrove Watch 1996')\nMap.addLayer(ee.Image().paint(gmw2007,0,3), {\"palette\":[\"228B22\"]}, 'Global Mangrove Watch 2007')\nMap.addLayer(ee.Image().paint(gmw2008,0,3), {\"palette\":[\"228B22\"]}, 'Global Mangrove Watch 2008')\nMap.addLayer(ee.Image().paint(gmw2009,0,3), {\"palette\":[\"228B22\"]}, 'Global Mangrove Watch 2009')\nMap.addLayer(ee.Image().paint(gmw2010,0,3), {\"palette\":[\"228B22\"]}, 'Global Mangrove Watch 2010')\nMap.addLayer(ee.Image().paint(gmw2015,0,3), {\"palette\":[\"228B22\"]}, 'Global Mangrove Watch 2015')\nMap.addLayer(ee.Image().paint(gmw2016,0,3), {\"palette\":[\"228B22\"]}, 'Global Mangrove Watch 2015')\n", "713555a5cc2f2d0c8e9f305aeb9625ba": "var gmw2010 = ee.FeatureCollection(\"projects/sat-io/open-datasets/GMW/GMW_2010_v2\");\nvar gmw_2010_v25 = ee.ImageCollection(\"projects/sat-io/open-datasets/GMW/GMW_2010_v25\");\n\nMap.addLayer(ee.Image().paint(gmw2010,0,3), {\"palette\":[\"228B22\"]}, 'Global Mangrove Watch 2010')\nMap.addLayer(gmw_2010_v25.mosaic(), {\"palette\":[\"228B22\"]}, 'Global Mangrove Watch 2010 v2.5')\n", "21caa84d736a622b9de9c760c266e3d9": "Map.addLayer(ee.FeatureCollection(mining).style({fillColor: '00000000',color: 'af8dc3',width:3}),{},'Mining Polygons')\nMap.addLayer(ee.FeatureCollection(validation).style({color: 'FC8D59',width:4}),{},'Mining Validation Points')\n\nMap.setOptions('SATELLITE')", "45addac3470657c7759dd39e5185eef1": "var fixed_image = fixed.first()\nvar mobile_image = mobile.first()\n\nMap.centerObject(fixed_image,2)\n\nMap.addLayer(\n    fixed_image,vis_fixed,\n    'Average Fixed Download Speed in kbps');\n\nMap.addLayer(mobile_image,vis_mobile,'Average Mobile Download Speed in kbps')\n\n\nvar Stranger_Things\n = \n[\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"all\",\n    \"stylers\": [\n      {\n        \"invert_lightness\": true\n      },\n      {\n        \"saturation\": \"-9\"\n      },\n      {\n        \"lightness\": \"0\"\n      },\n      {\n        \"visibility\": \"simplified\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape.man_made\",\n    \"elementType\": \"all\",\n    \"stylers\": [\n      {\n        \"weight\": \"1.00\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"all\",\n    \"stylers\": [\n      {\n        \"weight\": \"0.49\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"weight\": \"0.01\"\n      },\n      {\n        \"lightness\": \"-7\"\n      },\n      {\n        \"saturation\": \"-35\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"labels.text.stroke\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"labels.icon\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  }\n]\nMap.setOptions('Stranger_Things', {Stranger_Things: Stranger_Things})", "0577d22ed1d7bacba8a27bc31e306f65": "print('Total Predicted Power Plants',predicted_set.size())\nMap.addLayer(predicted_set,{color:'#FFD700'},'Predicted Power Plants')\n\nvar Dark\n = \n[\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text.fill\",\n    \"stylers\": [\n      {\n        \"saturation\": 36\n      },\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 40\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text.stroke\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 16\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.icon\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 20\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 17\n      },\n      {\n        \"weight\": 1.2\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 20\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"poi\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 21\n      }\n    ]\n  },\n  {\n    \"featureType\": \"poi\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"visibility\": \"simplified\"\n      },\n      {\n        \"color\": \"#8a4040\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#ffffff\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 17\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 29\n      },\n      {\n        \"weight\": 0.2\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.arterial\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 18\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.arterial\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#ffffff\"\n      },\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.local\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 16\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.local\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#faf2f2\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 19\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#b4bcc2\"\n      },\n      {\n        \"lightness\": 17\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  }\n]\nMap.setOptions('Dark', {Dark\n: Dark\n})", "1ee7aca214940accbabf7f968770f481": "// Visualization for WRI/GPPD/power_plants\nvar table = ee.FeatureCollection(\"projects/sat-io/open-datasets/global_power_plant_DB_1-3\");\n\n// Get a color from a fuel\nvar fuelColor = ee.Dictionary({\n  'Coal': '000000',\n  'Oil': '593704',\n  'Gas': 'BC80BD',\n  'Hydro': '0565A6',\n  'Nuclear': 'E31A1C',\n  'Solar': 'FF7F00',\n  'Waste': '6A3D9A',\n  'Wind': '5CA2D1',\n  'Geothermal': 'FDBF6F',\n  'Biomass': '229A00'\n});\n\n// List of fuels to add to the map\nvar fuels = ['Coal', 'Oil', 'Gas', 'Hydro', 'Nuclear', 'Solar', 'Waste',\n    'Wind', 'Geothermal', 'Biomass'];\n\n/**\n * Computes size from capacity and color from fuel type.\n *\n * @param {!ee.Geometry.Point} pt A point\n * @return {!ee.Geometry.Point} Input point with added style dictionary.\n */\nfunction addStyle(pt) {\n  var size = ee.Number(pt.get('capacity_mw')).sqrt().divide(10).add(2);\n  var color = fuelColor.get(pt.get('primary_fuel'));\n  return pt.set('styleProperty', ee.Dictionary({'pointSize': size, 'color': color}));\n}\n\n// Make a FeatureCollection out of the power plant data table\nvar pp = ee.FeatureCollection(table).map(addStyle);\nprint(pp.first());\n\n/**\n * Adds power plants of a certain fuel type to the map.\n *\n * @param {string} fuel A fuel type\n */\nfunction addLayer(fuel) {\n  print(fuel);\n  Map.addLayer(pp.filter(ee.Filter.eq('primary_fuel', fuel)).style({styleProperty: 'styleProperty', neighborhood: 50}), {}, fuel, true, 0.65);\n}\n\n// Apply `addLayer` to each record in `fuels`\nfuelColor.keys().getInfo().map(addLayer);\n", "03b29dc3ed6b68d21cb3924ab66a8b73": "print(gloric.first())\nMap.addLayer(gloric,{color: 'blue'}, 'GloRiC global')", "ee82002bc3038f30e5a04c41b6567a05": "Map.addLayer(ee.FeatureCollection(convex_hull),{},'Delta Convex Hull');\r\nMap.addLayer(ee.FeatureCollection(convex_hull_bound),{},'Delta Convex Hull Bounds');\r\n", "66543f94dcb97a8d27de1d6e128fe064": "//Import palette\r\nvar palettes = require('users/gena/packages:palettes')\r\n\r\nMap.setCenter(-78.2758, 1.663,10)\r\nMap.addLayer(water_mask,{'min':11,'max':125,palette: palettes.colorbrewer.Blues[5]},'GRWL Water Mask')\r\nMap.addLayer(grwl_water_vector.style({fillColor: '00000000',color: 'FF5500'}),{},'GRWL Vector')\r\nMap.addLayer(grwl_summary.style({fillColor: '00000000',color: '0000FF'}),{},'GRWL Vector Simplified')\r\n\r\n\r\n", "609a16955ed07b282fcd4bff4750f814": "var mainlands = ee.FeatureCollection('projects/sat-io/open-datasets/shoreline/mainlands');\nvar big_islands = ee.FeatureCollection('projects/sat-io/open-datasets/shoreline/big_islands');\nvar small_islands = ee.FeatureCollection('projects/sat-io/open-datasets/shoreline/small_islands');\n\nMap.setCenter(-4.843, 51.392,6)\nMap.addLayer(ee.Image().paint(mainlands,0,3), {\"palette\":[\"008000\"]}, 'Shoreline Mainlands')\nMap.addLayer(ee.Image().paint(big_islands,0,3), {\"palette\":[\"0000FF\"]}, 'Shoreline Big Islands')\nMap.addLayer(ee.Image().paint(small_islands,0,3), {\"palette\":[\"FF0000\"]}, 'Shoreline Small Islands')", "eb155a39ed8a1ec45fe9f85534d5794c": "var dataset = ee.ImageCollection('MODIS/006/MOD44W')\n                  .filter(ee.Filter.date('2015-01-01', '2015-05-01'));\nvar waterMask = dataset.select('water_mask');\n\n// set position of panel\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n \n// Create legend title\nvar legendTitle = ui.Label({\n  value: 'Legend',\n  style: {\n    fontWeight: 'bold',\n    fontSize: '18px',\n    margin: '0 0 4px 0',\n    padding: '0'\n    }\n});\n \n// Add the title to the panel\nlegend.add(legendTitle);\n \n// Creates and styles 1 row of the legend.\nvar makeRow = function(color, name) {\n \n      // Create the label that is actually the colored box.\n      var colorBox = ui.Label({\n        style: {\n          backgroundColor: '#' + color,\n          // Use padding to give the box height and width.\n          padding: '8px',\n          margin: '0 0 4px 0'\n        }\n      });\n \n      // Create the label filled with the description text.\n      var description = ui.Label({\n        value: name,\n        style: {margin: '0 0 4px 6px'}\n      });\n \n      // return the panel\n      return ui.Panel({\n        widgets: [colorBox, description],\n        layout: ui.Panel.Layout.Flow('horizontal')\n      });\n};\n \n//  Palette with the colors\nvar palette =['00FF00', 'FFFF00','FFA500','FF0000', '8B0000'];\n \n// name of the legend\nvar names = ['Non saline','Slightly saline','Moderately saline','Highly saline','Extremely saline'];\n \n// Add color and and names\nfor (var i = 0; i < 5; i++) {\n  legend.add(makeRow(palette[i], names[i]));\n  }  \n \n// add legend to map (alternatively you can also print the legend to the console)\nMap.add(legend);\nMap.addLayer(soil_salinity.median().updateMask(waterMask.mosaic().eq(0)),{'min':0,'max':5,'palette':palette},'Soil salinity')\n", "d8964dead482e8dbbe5d9c97b41d68e3": "//Import palette\r\nvar palettes = require('users/gena/packages:palettes');\r\n\r\nMap.addLayer(dif,{min:0.95,max:3,palette:palettes.cmocean.Dense[7]},'DIF')\r\nMap.addLayer(dni,{min:0.8,max:10,palette:palettes.matplotlib.plasma[7]},'DNI')\r\nMap.addLayer(pvout_ltam.first(),{min:0.55,max:7,palette:palettes.niccoli.linearl[7]},'PVOUT_LTAm')\r\nMap.addLayer(opta,{min:0,max:51,palette:palettes.colorbrewer.Spectral[9]},'OPTA')\r\nMap.addLayer(gti,{min:2.5,max:8,palette:palettes.cmocean.Solar[7]},'GTI')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "95f76e127f7afec9858b8f5dd3f86066": "Map.setCenter(-24.67,18.63,3)\r\n\r\nMap.addLayer(surge_era_5)\r\n\r\nfunction getSysTime(feature) {\r\n    return feature.set('system:time_start',ee.Date.parse(\"yyyy-MM-dd HH:mm:ss\",ee.String(feature.get('date')).replace(\"T\",\" \")))\r\n}\r\n\r\nvar timed = surge_era_5.filterBounds(geometry).map(getSysTime)\r\nprint('Total Features in AOI',timed.size())\r\nprint('Start Date',ee.Feature(timed.sort('system:time_start').first().get('system:time_start')))\r\nprint('End Date',ee.Feature(timed.sort('system:time_start',false).first()).get('system:time_start'))\r\n\r\n// Define the chart and print it to the console.\r\nvar chart =\r\n    ui.Chart.feature\r\n        .histogram({features: timed, property: 'surge_reconsturcted', maxBuckets: 50})\r\n        .setOptions({\r\n          title: 'Daily maximum surge (m)',\r\n          hAxis: {\r\n            title: 'Daily maximum surge (m)',\r\n            titleTextStyle: {italic: false, bold: true}\r\n          },\r\n          vAxis: {\r\n            title: 'Observation count',\r\n            titleTextStyle: {italic: false, bold: true}\r\n          },\r\n          colors: ['1d6b99'],\r\n          legend: {position: 'none'}\r\n        });\r\nprint(chart);\r\n", "74a0d0f6991b7bbcf3e66de416b5a24d": "Map.addLayer(WRZ_L1.style({fillColor: '00000000',color: '#d7191c'}),{},'Global Level 1 Water Resources Zone')\r\nMap.addLayer(WRZ_L2.style({fillColor: '00000000',color: '#fdae61'}),{},'Global Level 2 Water Resources Zone',false)\r\nMap.addLayer(WRZ_L3.style({fillColor: '00000000',color: '#abd9e9'}),{},'Global Level 3 Water Resources Zone',false)\r\nMap.addLayer(WRZ_L4.style({fillColor: '00000000',color: '#2c7bb6'}),{},'Global Level 4 Water Resources Zone',false)\r\nMap.addLayer(sa_river.style({fillColor: '00000000',color: '#002B4D'}),{},'South America River Network')", "8c3d27d67a2e7d9bda015c325d505409": "//Import palette\r\nvar palettes = require('users/gena/packages:palettes');\r\n\r\nMap.addLayer(air_density.first(),{min:0.75,max:1.2,palette:palettes.cmocean.Dense[7]},'Air Density')\r\nMap.addLayer(wind_speed.first(),{min:2,max:12,palette:palettes.matplotlib.plasma[7]},'Wind Speed')\r\nMap.addLayer(power_density.first(),{min:200,max:1750,palette:palettes.niccoli.linearl[7]},'Power Density')\r\nMap.addLayer(capacity_factor.first(),{min:0.006,max:0.70,palette:palettes.colorbrewer.Spectral[9]},'Capacity Factor')\r\nMap.addLayer(ruggedness_index,{min:0,max:0.6,palette:palettes.cmocean.Solar[7]},'Ruggedness Index')", "8dd904e9d95fe96fa058571b27f25f40": "function buffer_collection(ft) {\n  var buffered = ft.buffer(2000);//buffer distance in meter\n    return buffered;\n}\nprint(global_costal_rivers.size())\nprint(global_costal_rivers.first())\nMap.addLayer(\n  ee.FeatureCollection(global_costal_rivers.map(buffer_collection)).style({\n    fillColor: '00000000',  // transparent\n    color: '#191919',\n  }),{},'Global coastal rivers and environmental variables'\n);\n", "05bf7cb3bef5175f3f7c9aa46d29a046": "print(tillage.size(),'Total observations')\n\n// Get a color from crop types\nvar cropColor = ee.Dictionary({\n  'maize': '000000',\n  'barley.spring': '593704',\n  'soybean': 'BC80BD',\n  'wheat.winter': '0565A6',\n  'cotton': 'E31A1C',\n  'sorghum': 'FF7F00',\n  'sunflower': '6A3D9A',\n  'wheat_spring': '5CA2D1',\n});\n\n// List of crop types to add to the map\nvar crops = ['maize', 'barley.spring', 'soybean', 'wheat.winter', 'cotton', 'sorghum', 'sunflower',\n    'wheat_spring'];\n\nfunction addStyle(pt) {\n  var color = cropColor.get(pt.get('crop'));\n  return pt.set('styleProperty', ee.Dictionary({'pointSize': 2, 'color': color}));\n}\n\n// Make a FeatureCollection out of the crop table\nvar pp = ee.FeatureCollection(tillage).map(addStyle);\nprint(pp.first());\n\n/**\n * Adds crop types to the map.\n *\n * @param {string} fuel A fuel type\n */\nfunction addLayer(fuel) {\n  print(fuel);\n  Map.addLayer(pp.filter(ee.Filter.eq('crop', fuel)).style({styleProperty: 'styleProperty', neighborhood: 50}), {}, fuel, true, 0.65);\n}\n\n// Apply `addLayer` to each record in `fuels`\ncropColor.keys().getInfo().map(addLayer);", "5c5c27dfc533ebd768a34aa4f004e71c": "print('Fixed Performance Metrics',fixed_20200101.size())\nprint('Mobile Performance Metrics',mobile_20200101.size())\nMap.addLayer(fixed_20200101,{'color':'blue'},'Fixed 2020-01-01')\nMap.addLayer(mobile_20200101,{'color':'red'},'Mobile 2020-01-01')", "a168dcd1f992cf60c16e64e03e1bc842": "var catchments = ee.FeatureCollection(\"projects/sat-io/open-datasets/GOODD/GOOD2_catchments\");\r\nvar dams = ee.FeatureCollection(\"projects/sat-io/open-datasets/GOODD/GOOD2_dams\");\r\n\r\nMap.addLayer(ee.Image().paint(catchments,0,3), {\"palette\":[\"008000\"]}, 'GOODD Catchments')\r\nMap.addLayer(dams, {\"palette\":\"FF0000\"}, 'GOODD Dams')\r\n", "8a984f0e27a35fae4418aef1b9ceb4df": "print(sstg.size())\nMap.setCenter(-28.54, 42.92,3)\n\nvar cmap = [\"#000080\", \"#0000ff\", \"#0063ff\", \"#00d4ff\", \"#4effa9\", \"#a9ff4e\", \"#ffe600\", \"#ff7d00\", \"#ff1400\", \"#800000\"]\n\nvar addyear = function(image){\n  return image.set('year',image.date().get('year')).copyProperties(image)\n}\n\nprint(sstg.map(addyear).aggregate_histogram('year'))\nMap.addLayer(sstg.sort('system:index',false).first(),{min:-2,max:34,palette:cmap},'SSTG Sample')", "526ae3267c01917d2d429d31a39096cd": "print(gfplain250)\n\nvar pal = [\"#000080\", \"#0000ff\", \"#0063ff\", \"#00d4ff\", \"#4effa9\", \"#a9ff4e\", \"#ffe600\", \"#ff7d00\", \"#ff1400\", \"#800000\"]\n\nMap.addLayer(gfplain250.mosaic(),{palette:\"#002B4D\"},'Global Flood Plain 250m')", "e83b163b0a1b2d61244269ce5993e8b3": "var irrigation_maps = ee.ImageCollection(\"users/deepakna/global_irrigation_maps\")\r\nprint(irrigation_maps)\r\n\r\nvar highly_irrigated_areas_2010 = ee.Image(irrigation_maps.filter(ee.Filter.date('2010-01-01','2010-12-31')).first())\r\n  .expression(\"b(0) == 2 ? 1 : 0\");\r\n\r\nMap.addLayer(highly_irrigated_areas_2010.updateMask(highly_irrigated_areas_2010.neq(0)),vis_2010,'highly_irrigated_areas_2010')\r\n\r\nvar highly_irrigated_areas_2001 = ee.Image(\"users/deepakna/global_irrigation_maps/2001\")\r\n  .expression(\"b(0) == 2 ? 1 : 0\");\r\n  \r\nMap.addLayer(highly_irrigated_areas_2001.updateMask(highly_irrigated_areas_2001.neq(0)),vis_2001,'highly_irrigated_areas_2001')\r\n\r\n", "4058ef8c0f4d98a1444c9c03327878e3": "print('Total events 1985-2016',flood_events.size())\nMap.addLayer(flood_events,{},'Flood Events 1985-2016')", "38048829f4dc2ff2652a2d4953082dbc": "// Level 1 and level 2 for the year 2015\r\nvar lvl1 = ee.Image(\"users/Uploads/habitattypes/iucn_habitatclassification_composite_lvl1_ver004\")\r\nvar lvl2 = ee.Image(\"users/Uploads/habitattypes/iucn_habitatclassification_composite_lvl2_ver004\")\r\n\r\n// Note: Colour code is random\r\nMap.addLayer(lvl2.randomVisualizer())\r\n\r\n// Changemask for later. \r\n// Replace year in folder and mask to get a different year (for years 2016-2019)\r\n//for example 2017 would be var change2017_lvl1 = ee.Image(\"users/Uploads/habitattypes/changemasks2016/iucn_habitatclassification_2017changemask_lvl1_ver004\")\r\nvar change2016_lvl1 = ee.Image(\"users/Uploads/habitattypes/changemasks2016/iucn_habitatclassification_2016changemask_lvl1_ver004\")\r\nprint(change2016_lvl1)", "489333ffe575920a4623c10c11a52923": "var palettes = require('users/gena/packages:palettes');\r\n\r\nMap.addLayer(lt_snow_quantile.first(),{min:-20,max:60,palette:palettes.colorbrewer.Blues[9]},'p05 2003-03')\r\nMap.addLayer(lt_p90.first(),{min:-20,max:60,palette:palettes.colorbrewer.RdYlBu[9]},'p90 2000-2012')\r\nMap.addLayer(lt_sd.first(),{min:0,max:41,palette:palettes.colorbrewer.RdBu[9]},'sd 2000-2012')\r\nMap.addLayer(tmax_geom.first(),{min: 0,max:150,palette:palettes.colorbrewer.RdBu[9]},'tmax geom 2000-2012')\r\nMap.addLayer(tmin_geom.first(),{min:0,max:150,palette:palettes.colorbrewer.RdBu[9]},'tmin geom 2000-2012')", "d2a2479e7dd57a59f009d7eb19e40f1b": "var gowt = ee.FeatureCollection(\"projects/sat-io/open-datasets/global_offshore_wind_turbine_v1-3\");\r\nMap.setCenter(30.290751107548992,26.158890852053972,3)\r\nMap.addLayer(gowt, {\"palette\":\"FF0000\"}, 'Global Offshore Wind Turbines')\r\n", "ca5b1a99dc41f3b3daf8661ea3d32291": "Map.addLayer(hindcast_extent.first().updateMask(hindcast_extent.first().neq(0)),{min:0,max:1,palette:['#000000','#FFD700']},'Hindcast Extent')\nMap.addLayer(observed_extent.first().updateMask(observed_extent.first().neq(0)),{min:0,max:1,palette:['#000000','#FFD700']},'Observed Extent')\nMap.addLayer(projected_extent.sort('system:time_start',false).first().updateMask(projected_extent.sort('system:time_start',false).first().neq(0)),{min:0,max:1,palette:['#FFD700']},'Projected Extent')\n\n\nvar Dark\n = \n[\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text.fill\",\n    \"stylers\": [\n      {\n        \"saturation\": 36\n      },\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 40\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text.stroke\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 16\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.icon\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 20\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 17\n      },\n      {\n        \"weight\": 1.2\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 20\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"poi\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 21\n      }\n    ]\n  },\n  {\n    \"featureType\": \"poi\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"visibility\": \"simplified\"\n      },\n      {\n        \"color\": \"#8a4040\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#ffffff\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 17\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 29\n      },\n      {\n        \"weight\": 0.2\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.arterial\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 18\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.arterial\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#ffffff\"\n      },\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.local\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 16\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.local\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#faf2f2\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 19\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#b4bcc2\"\n      },\n      {\n        \"lightness\": 17\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  }\n]\nMap.setOptions('Dark', {Dark\n: Dark\n})", "00a4d124364828026daa89aa40fdd0cf": "Map.addLayer(ee.FeatureCollection(gpw),{},'gpw-v4-admin-center-points-rev11')\n", "fe362e62a7f6a39e502c11b64ae1c84e": "var palette_green = ['#ffffe5','#f7fcb9','#d9f0a3','#addd8e','#78c679','#41ab5d','#238443','#006837','#004529']\nvar palette_red = ['#fff7ec','#fee8c8','#fdd49e','#fdbb84','#fc8d59','#ef6548','#d7301f','#b30000','#7f0000']\n\nMap.addLayer(f_primary.mosaic(),{palette:palette_green},'Female Primary gridded')\nMap.addLayer(m_primary.mosaic(),{palette:palette_red},'Male Primary gridded')\n\n\nMap.addLayer(f_secondary.mosaic(),{palette:palette_green},'Female Secondary gridded',false)\nMap.addLayer(m_secondary.mosaic(),{palette:palette_red},'Male Secondary gridded',false)\n", "35895dc6b3dda529d308673018cadced": "/**\nrain4pe: High-resolution gridded precipitation dataset for Peruvian and \nEcuadorian watersheds (1981-2015)\n\nImage properties: \n  - 'system:time_start' (Unix time)\nSpatial resolution: 0.1\u00b0 (or roughly 10km x 10km)\n\n\nGoogle Earth Engine assets:\n  - rain4pe monthly: \"users/csaybar/rainpe/monthly\"\n  - rain4pe daily: \"users/csaybar/rainpe/monthly\" & \"users/ryali93/rainpe/monthly\"\n  - rain4pe monthly climatology: \"users/csaybar/rainpe/monthly_clim\"\n  - rain4pe annual mean: \"users/csaybar/rainpe/annual\"\n  \nMore Information: https://dataservices.gfz-potsdam.de/pik/showshort.php?id=6f766e20-2d94-11eb-9603-497c92695674\n*/\n\n// 1. Load the pp ee.Image.\nvar rain4pe_ym = ee.Image(\"users/csaybar/rainpe/annual_mean\")\n\n\n// 2. Define an area of interest geometry.\nvar aoi = rain4pe_ym.geometry()\n  \n// 3. Display results.\nvar palette = ['000096','0064ff', '00b4ff', '33db80', '9beb4a', 'ffeb00', 'ffb300', 'ff6400', 'eb1e00', 'af0000'];\nMap.centerObject(aoi)\nMap.addLayer(rain4pe_ym, {min:0, max:5000, palette: palette})\n\n\n// 4. Export ee.Image\nExport.image.toDrive({\n  image: rain4pe_ym,\n  description: \"rain4pe-pp-mean\",\n  fileNamePrefix: \"rain4pe_pp_mean\"\n})", "b47746a9e13a42d10537f1ac4f92475b": "/**\nrain4pe: High-resolution gridded precipitation dataset for Peruvian and \nEcuadorian watersheds (1981-2015)\n\nImage properties: \n  - 'system:time_start' (Unix time)\nSpatial resolution: 0.1\u00b0 (or roughly 10km x 10km)\n\n\nGoogle Earth Engine assets:\n  - rain4pe monthly: \"users/csaybar/rainpe/monthly\"\n  - rain4pe daily: \"users/csaybar/rainpe/monthly\" & \"users/ryali93/rainpe/monthly\"\n  - rain4pe monthly climatology: \"users/csaybar/rainpe/monthly_clim\"\n  - rain4pe annual mean: \"users/csaybar/rainpe/annual\"\n  \nMore Information: https://dataservices.gfz-potsdam.de/pik/showshort.php?id=6f766e20-2d94-11eb-9603-497c92695674\n*/\n\n\n// 1. Global Parameters\nvar ROI = ee.Geometry.Rectangle([-74, -16, -71, -14]);\nvar start_date = \"1981-01-01\";\nvar end_date = \"2015-12-31\";\n\n\n// 2. Function to compute spatial average.\nvar ppreducer = function(rain4pe) {\n  var params = {collection: ROI, reducer: ee.Reducer.mean(), scale: 5000};\n  var image_value = rain4pe.reduceRegions(params).first().get('mean');\n  var image_date = rain4pe.get('system:time_start');\n  var ft = ee.Feature(null, {'system:time_start': image_date,\n                         'date': ee.Date(image_date).format('Y-M-d'), \n                         'value': image_value});\n  return ft;\n};\n\n\n// 3. Create a time series chart.\nvar rain4pe_daily_data = ee.ImageCollection(\"projects/sat-io/open-datasets/rainpe/daily\")\n\nvar rain4pe_data = rain4pe_daily_data.filterDate(start_date, end_date)\n                                     .map(ppreducer);\nvar graph = ui.Chart.feature.byFeature(\n  rain4pe_daily_data.filterDate(\"1981-06-01\", \"1982-06-01\").map(ppreducer), \n  'system:time_start', \n  'value'\n);\nprint(graph.setChartType(\"ColumnChart\")\n           .setOptions({vAxis: {title: 'PP (mm/day)'},\n                        hAxis: {title: 'Date'}}));\n\n\n// 4. Export results\nExport.table.toDrive({collection: rain4pe_data,\n                      selectors: 'date, value',\n                      description: \"rain4pe-daily-data\",\n                      fileNamePrefix:\"rain4pe_ts\"})\n                      \n\n// 5. Display a specific day\nvar daily_rain = ee.Image(\"users/ryali93/rainpe/daily/1998_01_25\")\nvar palette = [\n  '000096','0064ff', '00b4ff', '33db80', '9beb4a',\n  'ffeb00', 'ffb300', 'ff6400', 'eb1e00', 'af0000'\n];\n\nMap.addLayer(daily_rain, {min:0, max:80, palette: palette})\nMap.centerObject(ROI);\nMap.addLayer(ROI)", "5f88fb66ff5d9799c0bcd9ab7bccd200": "/**\nrain4pe: High-resolution gridded precipitation dataset for Peruvian and \nEcuadorian watersheds (1981-2015)\n\nImage properties: \n  - 'system:time_start' (Unix time)\nSpatial resolution: 0.1\u00b0 (or roughly 10km x 10km)\n\n\nGoogle Earth Engine assets:\n  - rain4pe monthly: \"users/csaybar/rainpe/monthly\"\n  - rain4pe daily: \"users/csaybar/rainpe/monthly\" & \"users/ryali93/rainpe/monthly\"\n  - rain4pe monthly climatology: \"users/csaybar/rainpe/monthly_clim\"\n  - rain4pe annual mean: \"users/csaybar/rainpe/annual\"\n  \nMore Information: https://dataservices.gfz-potsdam.de/pik/showshort.php?id=6f766e20-2d94-11eb-9603-497c92695674\n*/\n\nvar rain4pe_mclim = ee.ImageCollection(\"users/csaybar/rainpe/monthly_clim\")\n\n\n// Define an area of interest geometry.\nvar aoi = rain4pe_mclim.first().geometry()\n  \n\n// Define arguments for animation function parameters.\nvar palette = ['000096','0064ff', '00b4ff', '33db80', '9beb4a', 'ffeb00', 'ffb300', 'ff6400', 'eb1e00', 'af0000'];\nvar videoArgs = {\n  dimensions: 768,\n  region: aoi,\n  framesPerSecond: 4,\n  crs: 'EPSG:3857',\n  min: 0,\n  max: 500,\n  palette: palette\n};\n\nprint(rain4pe_mclim.getVideoThumbURL(videoArgs));\n\nMap.centerObject(aoi)\nMap.addLayer(rain4pe_mclim.first(), {min:0, max:500, palette: palette})", "3374b08b0eacaf0a4003d9098a4d56b3": "/**\nrain4pe: High-resolution gridded precipitation dataset for Peruvian and \nEcuadorian watersheds (1981-2015)\n\nImage properties: \n  - 'system:time_start' (Unix time)\nSpatial resolution: 0.1\u00b0 (or roughly 10km x 10km)\n\n\nGoogle Earth Engine assets:\n  - rain4pe monthly: \"users/csaybar/rainpe/monthly\"\n  - rain4pe daily: \"users/csaybar/rainpe/monthly\" & \"users/ryali93/rainpe/monthly\"\n  - rain4pe monthly climatology: \"users/csaybar/rainpe/monthly_clim\"\n  - rain4pe annual mean: \"users/csaybar/rainpe/annual\"\n  \nMore Information: https://dataservices.gfz-potsdam.de/pik/showshort.php?id=6f766e20-2d94-11eb-9603-497c92695674\n*/\n\n\n// 1. Global Parameters\nvar ROI = ee.Geometry.Rectangle([-74, -16, -71, -14]);\nvar start_date = \"1981-01-01\";\nvar end_date = \"2018-06-30\";\n\n\n// 2. Function to compute spatial average.\nvar ppreducer = function(rain4pe) {\n  var params = {collection: ROI, reducer: ee.Reducer.mean(), scale: 5000};\n  var image_value = rain4pe.reduceRegions(params).first().get('mean');\n  var image_date = rain4pe.get('system:time_start');\n  var ft = ee.Feature(null, {'system:time_start': image_date,\n                         'date': ee.Date(image_date).format('Y-M-d'), \n                         'value': image_value});\n  return ft;\n};\n\n\n// 3. Create a time series chart.\nvar rain4pe_data = ee.ImageCollection(\"users/csaybar/rainpe/monthly\")\n                     .filterDate(start_date, end_date)\n                     .map(ppreducer);\nvar graph = ui.Chart.feature.byFeature(rain4pe_data, 'system:time_start', 'value');\nprint(graph.setChartType(\"ColumnChart\")\n           .setOptions({vAxis: {title: 'PP (mm/month)'},\n                        hAxis: {title: 'Date'}}));\n\n\n// 4. Export results\nExport.table.toDrive({collection: rain4pe_data,\n                      selectors: 'date, value',\n                      description: \"rain4pe-montly-data\",\n                      fileNamePrefix:\"rain4pe_ts\"})\n\n\n// 5. Display a specific month\nvar daily_rain = ee.Image(\"users/csaybar/rainpe/monthly/1998_01_16\")\nvar palette = [\n  '000096','0064ff', '00b4ff', '33db80', '9beb4a',\n  'ffeb00', 'ffb300', 'ff6400', 'eb1e00', 'af0000'\n];\n\nMap.addLayer(daily_rain, {min:0, max:500, palette: palette})\nMap.centerObject(ROI);\nMap.addLayer(ROI)\n                      ", "718924e9af8848afa8327a45533866c1": "print('Total Harmonized Global Windfarms 2020',wind_farms.size())\nprint('Total Harmonized Global solarfarms 2020',solar_farms.size())\n\nMap.addLayer(wind_farms,{'color':'blue'},'Global Harmonized Dataset: Wind farms')\nMap.addLayer(solar_farms,{'color':'red'},'Global Harmonized Dataset: Solar farms')", "420044652df8ec8ab29beb194be6df52": "var viz = [\"67001f\",\"b2182b\",\"d6604d\",\"f4a582\",\"fddbc7\",\"ffffff\",\"e0e0e0\",\"bababa\",\"878787\",\"4d4d4d\"].reverse()\n\nMap.addLayer(dmsp.first(),{'min':50,'max':65,'palette':viz},'DMSP NTL 1992')\nMap.addLayer(viirs.sort('system:time_start',false).first().updateMask(ee.Image(viirs.sort('system:time_start',false).first()).gte(50)),{'min':50,'max':65,'palette':viz},'Harmonized Simulated VIIRS NTL 2020')\n\n\nvar Dark\n = \n[\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text.fill\",\n    \"stylers\": [\n      {\n        \"saturation\": 36\n      },\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 40\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text.stroke\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 16\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.icon\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 20\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 17\n      },\n      {\n        \"weight\": 1.2\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 20\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"poi\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 21\n      }\n    ]\n  },\n  {\n    \"featureType\": \"poi\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"visibility\": \"simplified\"\n      },\n      {\n        \"color\": \"#8a4040\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#ffffff\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 17\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 29\n      },\n      {\n        \"weight\": 0.2\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.arterial\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 18\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.arterial\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#ffffff\"\n      },\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.local\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 16\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.local\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#faf2f2\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 19\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#b4bcc2\"\n      },\n      {\n        \"lightness\": 17\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  }\n]\nMap.setOptions('Dark', {Dark\n: Dark\n})", "5f8af7ee25d50d44a58c90bf0efc91bb": "var HRSL = ee.ImageCollection(\"projects/sat-io/open-datasets/hrsl/hrslpop\");\nvar HRSL_men = ee.ImageCollection(\"projects/sat-io/open-datasets/hrsl/hrsl_men\");\nvar HRSL_women = ee.ImageCollection(\"projects/sat-io/open-datasets/hrsl/hrsl_women\");\nvar HRSL_youth = ee.ImageCollection(\"projects/sat-io/open-datasets/hrsl/hrsl_youth\");\nvar HRSL_children_under_five = ee.ImageCollection(\"projects/sat-io/open-datasets/hrsl/hrsl_children_under_five\");\nvar HRSL_women_reproductive_age = ee.ImageCollection(\"projects/sat-io/open-datasets/hrsl/hrsl_women_reproductive_age\");\nvar HRSL_elderly_over_sixty = ee.ImageCollection(\"projects/sat-io/open-datasets/hrsl/hrsl_elderly_over_sixty\");\n\nvar countries = ee.FeatureCollection(\"USDOS/LSIB_SIMPLE/2017\")\n\n// Load packages for basemap and palettes\nvar palettes = require('users/gena/packages:palettes')\nvar style = require('users/gena/packages:style')\n\n\nprint('Total images',HRSL.size())\n\n//Create a spatial mosaic so image collection becomes a single image\nvar image=HRSL.median()\n\n//Zoom to some place in the world\nMap.setCenter(28.9853, 41.0703,10)\n//Adding country boundaries (Feel free to remove)\nMap.addLayer(ee.Image().paint(countries,0,1), {color:'00FF00'}, 'Area of Interest')\n\n\nvar rgbVis = {palette: palettes.colorbrewer.Reds[9]}\nMap.addLayer(image,rgbVis,'HRSL')\nMap.addLayer(HRSL_men.median(),{palette: palettes.colorbrewer.Blues[9]},'HRSL men',false)\nMap.addLayer(HRSL_women.median(),{palette: palettes.colorbrewer.PuOr[9]},'HRSL women',false)\nMap.addLayer(HRSL_youth.median(),{palette: palettes.colorbrewer.PuBuGn[9]},'HRSL youth',false)\nMap.addLayer(HRSL_children_under_five.median(),{palette: palettes.colorbrewer.YlOrRd[9]},'HRSL Children under five',false)\nMap.addLayer(HRSL_women_reproductive_age.median(),{palette: palettes.colorbrewer.RdYlBu[9]},'HRSL Women of reproductive age',false)\nMap.addLayer(HRSL_elderly_over_sixty.median(),{palette: palettes.colorbrewer.YlGnBu[9]},'HRSL Elderly over sixty',false)\n\n\nstyle.SetMapStyleGrey()", "a4f48493ef6cbbc1f1fc990f6d7e03ac": "/*\nClasses\n [1] Industrial closed-canopy oil palm plantations\n [2] Smallholder closed-canopy oil palm plantations, and \n [3] other land covers/uses that are not closed canopy oil palm.\n */\n\n//Zoom to a cluster\nMap.setCenter(107.1307996323747,1.5664239997609994,7)\n\n//Import module to set Style\nvar style = require('users/gena/packages:style')\n\n//Mask out Class 3 other classes that are not closed canopy oil plam\nvar oil_palm = oil_palm_2019.mosaic().updateMask(oil_palm_2019.mosaic().neq(3))\n\nMap.addLayer(oil_palm,{min:1,max:2,\"palette\":[\"ff6218\",\"ff3ba7\"]},'Industrial and Small Holder Closed Canopy oil palm plantations')\n\nstyle.SetMapStyleDark()", "77c8d6c058c492fb71e0c2d439345952": "var ca_lc_last = ee.Image(ca_lc.sort('system:time_start',false).first());\n\nvar from = [0, 20, 31, 32, 33, 40, 50, 80, 81, 100, 210, 220, 230];\nvar to =   [0, 1,  2,  3,  4,  5,  6,  7,  8,  9,   10,  11,  12 ];\nca_lc_last = ca_lc_last.remap(from, to);\n\nprint(\"Reclassed values:\");\nprint({\"from\": from, \"to\": to});\n\n// Define a dictionary which will be used to make legend and visualize image on map\nvar dict = {\n  \"names\": [\n  \"Unclassified\",\n  \"Water\",\n  \"Snow/Ice\",\n  \"Rock/Rubble\",\n  \"Exposed/Barren land\",\n  \"Bryoids\",\n  \"Shrubs\",\n  \"Wetland\",\n  \"Wetland-treed\",\n  \"Herbs\",\n  \"Coniferous\",\n  \"Broadleaf\",\n  \"Mixedwood\"\n  ],\n  \"colors\": [\n    \"#686868\",\n    \"#3333ff\",\n    \"#ccffff\",\n    \"#cccccc\",\n    \"#996633\",\n    \"#ffccff\",\n    \"#ffff00\",\n    \"#993399\",\n    \"#9933cc\",\n    \"#ccff33\",\n    \"#006600\",\n    \"#00cc00\",\n    \"#cc9900\"\n  ]};\n\n// Create a panel to hold the legend widget\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n\n// Function to generate the legend\nfunction addCategoricalLegend(panel, dict, title) {\n\n  // Create and add the legend title.\n  var legendTitle = ui.Label({\n    value: title,\n    style: {\n      fontWeight: 'bold',\n      fontSize: '18px',\n      margin: '0 0 4px 0',\n      padding: '0'\n    }\n  });\n  panel.add(legendTitle);\n\n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\n  panel.add(loading);\n\n  // Creates and styles 1 row of the legend.\n  var makeRow = function(color, name) {\n    // Create the label that is actually the colored box.\n    var colorBox = ui.Label({\n      style: {\n        backgroundColor: color,\n        // Use padding to give the box height and width.\n        padding: '8px',\n        margin: '0 0 4px 0'\n      }\n    });\n\n    // Create the label filled with the description text.\n    var description = ui.Label({\n      value: name,\n      style: {margin: '0 0 4px 6px'}\n    });\n\n    return ui.Panel({\n      widgets: [colorBox, description],\n      layout: ui.Panel.Layout.Flow('horizontal')\n    });\n  };\n\n  // Get the list of palette colors and class names from the image.\n  var palette = dict['colors'];\n  var names = dict['names'];\n  loading.style().set('shown', false);\n\n  for (var i = 0; i < names.length; i++) {\n    panel.add(makeRow(palette[i], names[i]));\n  }\n\n  Map.add(panel);\n\n}\n\n\n/*\n  // Display map and legend ///////////////////////////////////////////////////////////////////////////////\n*/\n\n// Add the legend to the map\naddCategoricalLegend(legend, dict, 'CA Annual forest LC map 2019');\n\nMap.setCenter(-97.61655457157725,55.6280720462063,4)\n\n// Add image to the map\nMap.addLayer(ca_lc_last.mask(ca_lc_last.neq(0)), {min:0, max:12, palette:dict['colors']}, 'CA Annual forest LC map 2019')\n", "c962180f9229986e9e19d141166479bb": "print('Total size AT',AT.size())\nprint('Total size ESI',ESI.size())\nprint('Total size HI',HI.size())\nprint('Total size Humidex',Humidex.size())\nprint('Total size MRT',MRT.size())\nprint('Total size NET',NET.size())\nprint('Total size UTCI',UTCI.size())\nprint('Total size UTCI2',UTCI2.size())\nprint('Total size UTCI3',UTCI3.size())\nprint('Total size WBGT',WBGT.size())\nprint('Total size WBT',WBT.size())\nprint('Total size WCT',WCT.size())\n\nvar palette = [\"#FAFAD2\",\"#EEE8AA\",\"#F0E68C\",\"#DAA520\",\"#FFD700\",\"#FFA500\",\"#FF8C00\",\"#CD853F\",\"#D2691E\",\"#8B4513\",\"#A0522D\"]\n\nvar image = AT.first()\n\n// Get projection information from band 2\nvar b1proj = image.select('b2').projection();\nprint('Projection:', b1proj);\n\n// Get scale (in meters) information from band 2\nvar b1scale = image.select('b2').projection().nominalScale();\nprint('Scale in meters:', b1scale);\n\n\nMap.addLayer(AT.first().select('b2'),{min:-45,max:30,palette:palette},'AT')\nMap.addLayer(ESI.first().select('b2'),{min:-45,max:30,palette:palette},'ESI')", "9bc272d8183275bcbc6d2f89e3361485": "print(lake_poly.first())\nprint(lake_points.first())\nMap.addLayer(lake_poly,{'color':'#00008B'},'HydroATLAS Lakes Polygons v1.0')\nMap.addLayer(\n  basin_l5.style({\n    fillColor: '00000000',\n    color: 'FF4500',\n  }),{},'HydroATLAS BasinATLAS Level 05 v1.0'\n);\nMap.addLayer(river_atlas,{'color':'#809fff'},'HydroATLAS RiverATLAS v1.0')\nMap.addLayer(lake_points,{'color':'red','opacity':0.1},'HydroLakes Points v1.0',false)", "c94f1bd8e4e18641ec7f4fc5592e7a63": "Map.addLayer(lake_poly,{'color':'#00008B'},'HydroLakes Polygons v1.0')\nMap.addLayer(lake_points,{'color':'red','opacity':0.1},'HydroLakes Points v1.0',false)", "761bd1c4fc4ad6c91286b035ef4d1a0b": "// Visualization for HydroWASTE\nvar table = ee.FeatureCollection(\"projects/sat-io/open-datasets/HydroWaste/HydroWASTE_v10\");\n\n\nvar typeColor = ee.Dictionary({\n  'Primary': 'fc8d59',\n  'Secondary': '542788',\n  'Advanced': 'fdb863',\n});\n\n\nvar type = ['Primary', 'Secondary', 'Advanced'];\n\nfunction addStyle(pt) {\n  var size = ee.Number(pt.get('WASTE_DIS')).sqrt().divide(100);\n  var color = typeColor.get(pt.get('LEVEL'));\n  return pt.set('styleProperty', ee.Dictionary({'pointSize': size, 'color': color}));\n}\n\nvar pp = ee.FeatureCollection(table).map(addStyle);\nMap.addLayer(pp.filter(ee.Filter.eq('LEVEL', 'Primary')).style({styleProperty: 'styleProperty'}), {}, 'Primary', true,0.65);\nMap.addLayer(pp.filter(ee.Filter.eq('LEVEL', 'Secondary')).style({styleProperty: 'styleProperty'}), {}, 'Secondary', true,0.65);\nMap.addLayer(pp.filter(ee.Filter.eq('LEVEL', 'Advanced')).style({styleProperty: 'styleProperty'}), {}, 'Advanced', true,0.65);", "34517ab5c05be78e5f7d9227a4ca7b7e": "print(DEM);\r\n\r\nvar elevationVis = {\r\n  min: -30.0,\r\n  max: 1200.0,\r\n  palette: [\"#317605\",\"f5cf13\",\"b45504\",\"#ffffff\"],\r\n};\r\n\r\nMap.setCenter(-18.52, 64.81, 7); \r\nMap.addLayer(DEM, elevationVis, 'IslandsDEMv1 10m isn93');", "b322661badd81a08a13d5ad8b5822089": "var jan = (hxg.filter(ee.Filter.equals('month',1)).filter(ee.Filter.equals('hour',0)).reduce(ee.Reducer.sum()).rename('b1_jan'))\nvar dec = (hxg.filter(ee.Filter.equals('month',12)).filter(ee.Filter.equals('hour',0)).reduce(ee.Reducer.sum()).rename('b1_dec'))\n\n//Import palette\nvar palettes = require('users/gena/packages:palettes')\n\nMap.addLayer(jan, {min: [150], max: [1000], palette: palettes.cmocean.Curl[7]}, 'HXG January Hour 00');\nMap.addLayer(dec, {min: [150], max: [1000], palette: palettes.cmocean.Balance[7]}, 'HXG December Hour 00');\n", "729f0a1a2fa4e04f8c034b4228da164b": "print(reference.size())\n\nvar buff = function(ft) {\n  var buffered = ft.buffer(1000)\n  return buffered\n};\n\nMap.addLayer(reference.map(buff),{},'LCMAP reference')", "791aa894ce0abfe1a9eb1dc478bbc5d7": "//Import palette\nvar palettes = require('users/gena/packages:palettes');\nvar lcpri_palette = ['E60000','A87000','E3E3C2','1D6330','476BA1','BAD9EB','FFFFFF','B3B0A3']\nvar lcsec_palette = ['E60000','A87000','E3E3C2','1D6330','476BA1','BAD9EB','FFFFFF','B3B0A3']\nvar lcachg_palette = ['E60000','A87000','E3E3C2','1D6330','476BA1','BAD9EB','FFFFFF','B3B0A3','A201FF']\nvar sclast_palette = ['FFC7AA','F87E45','CC764E','86A7B6','46A4EE','7954C8','7A24AA','432172']\nvar scstab_palette = ['BA4E16','EE964D','FFE29C','F4FBC1','E1F3C3','BCE6CA','46989C']\nvar scmqa_palette = ['000000','A900E6','DF73FF','F5F5E3','DB8A00','924900','9C9C9C','FFFFFF']\n\n//Add map layers\nMap.addLayer(lcpri.sort('system:time_start',false).first(),{min:1,max:8,palette:lcpri_palette},'LCPRI',false)\nMap.addLayer(lcsec.sort('system:time_start',false).first(),{min:1,max:8,palette:lcsec_palette},'LCSEC',false)\nMap.addLayer(lcpconf.sort('system:time_start',false).first(),{min:74,max:118,palette:palettes.cmocean.Speed[7]},'LCPCONF',false)\nMap.addLayer(lcsconf.sort('system:time_start',false).first(),{min:8,max:64,palette:palettes.cmocean.Solar[7]},'LCSCONF',false)\nMap.addLayer(lcachg.sort('system:time_start',false).first(),{min:1,max:9,palette:lcachg_palette},'LCACHG',false)\nMap.addLayer(sctime.sort('system:time_start',false),{min:100,max:292,palette:palettes.cmocean.Curl[7]},'SCTIME',false)\nMap.addLayer(scmag.sort('system:time_start',false),{min:651,max:3700,palette:palettes.cmocean.Algae[7]},'SCMAG',false)\nMap.addLayer(ee.Image(sclast.sort('system:time_start',false).first()).mask(ee.Image(sclast.sort('system:time_start',false).first()).gt(0)),{min:518,max:4600,palette:sclast_palette},'SCLAST',false)\nMap.addLayer(scstab.sort('system:time_start',false).first(),{min:70,max:13000,palette:scstab_palette},'SCSTAB',false)\nMap.addLayer(scmqa.sort('system:time_start',false).first().remap([0,4,6,8,14,24,44,54],[0,1,2,3,4,5,6,7]).mask(ee.Image(scmqa.sort('system:time_start',false).first()).gt(0)),{min:0,max:7,palette:scmqa_palette},'SCMQA',false)", "a042b202b2912c8e3abe0b4f42bceb2f": "//Add a multiclass chip\nvar image = na.filter(ee.Filter.gte('distinct_classes',7)).first()\nimage = image.updateMask(image.gt(0)).select('b1') //Mask 0 and select b1 with landcover value for visualization\nMap.centerObject(image,16)\n\nprint(image)\n\n// Define a dictionary which will be used to make legend and visualize image on map\nvar dict = {\n  \"names\": [\n    \"Water (Permanent)\",//1\n    \"Artificial\",//2\n    \"Natural\",//3\n    \"Snow/Ice (Permanent)\",//4\n    \"Woody\",//5\n    \"Cultivated\",//6\n    \"(Semi) Natural\",//7\n  ],\n  \"colors\": [\n    \"#0000ff\",\n    \"#888888\",\n    \"#d1a46d\",\n    \"#f5f5ff\",\n    \"#d64c2b\",\n    \"#186818\",\n    \"#00ff00\"\n  ]};\n\n// Create a panel to hold the legend widget\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n\n// Function to generate the legend\nfunction addCategoricalLegend(panel, dict, title) {\n  \n  // Create and add the legend title.\n  var legendTitle = ui.Label({\n    value: title,\n    style: {\n      fontWeight: 'bold',\n      fontSize: '18px',\n      margin: '0 0 4px 0',\n      padding: '0'\n    }\n  });\n  panel.add(legendTitle);\n  \n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\n  panel.add(loading);\n  \n  // Creates and styles 1 row of the legend.\n  var makeRow = function(color, name) {\n    // Create the label that is actually the colored box.\n    var colorBox = ui.Label({\n      style: {\n        backgroundColor: color,\n        // Use padding to give the box height and width.\n        padding: '8px',\n        margin: '0 0 4px 0'\n      }\n    });\n  \n    // Create the label filled with the description text.\n    var description = ui.Label({\n      value: name,\n      style: {margin: '0 0 4px 6px'}\n    });\n  \n    return ui.Panel({\n      widgets: [colorBox, description],\n      layout: ui.Panel.Layout.Flow('horizontal')\n    });\n  };\n  \n  // Get the list of palette colors and class names from the image.\n  var palette = dict['colors'];\n  var names = dict['names'];\n  loading.style().set('shown', false);\n  \n  for (var i = 1; i < names.length; i++) {\n    panel.add(makeRow(palette[i], names[i]));\n  }\n  \n  Map.add(panel);\n  \n}\n\n\n/*\n  // Display map and legend ///////////////////////////////////////////////////////////////////////////////\n*/\n\n// Add the legend to the map\naddCategoricalLegend(legend, dict, 'Land cover');\n\n// Add LC image to the map\nMap.addLayer(image, {min:1, max:7, palette:dict['colors']}, 'LandCoverNet v1.0 NA')", "34a2a4df430c5e7c8a6e5073cd66175c": "var BP = ee.Image('users/keikonomura/fire/LBA_CU_2019_20200415_C01_V01_BP_L8');\n\nMap.addLayer(BP.updateMask(BP.lte(100)).selfMask(),{min:0,max:100, palette:['white','orange','red','black']},'Burn Probability');\nMap.setCenter(-122.62, 40.72, 10);", "b27444561070de599678b2fe03c2d3dc": "Map.addLayer(ee.FeatureCollection(transmission).style({color: 'FC8D59',width:1}),{},'Predicted Distribution and Transmission Lines')\r\nMap.addLayer(lv,{},'Predicted low-voltage infrastructure in kilometres per cell')\r\nMap.addLayer(targets,{},'Locations predicted to be connected to distribution grid')\r\n\r\nMap.setOptions('TERRAIN')", "dd31cd3ab59bf2a1333a596b0bf44884": "var palette = [\"#000080\", \"#0000ff\", \"#0063ff\", \"#00d4ff\", \"#4effa9\", \"#a9ff4e\", \"#ffe600\", \"#ff7d00\", \"#ff1400\", \"#800000\"]\nMap.addLayer(aod_daily.first(),{min:0,max:1,palette:palette},'AOD First')\nMap.addLayer(aod_daily.sort('system:time_start',false).first(),{min:0,max:1,palette:palette},'AOD Last')\nMap.centerObject(aod_daily.first(),4)\n", "feec2f9bffd7c7e4e2383b730bfa674f": "var palettes = require('users/gena/packages:palettes');\n\n//gf indicates the gap-filled LST in the unit of 0.1 Celsius temperature (0.1 degree C) \nMap.addLayer(gf_day_1km.first().multiply(0.1),{min:-50,max:50,palette:palettes.cmocean.Balance[7]},' Daytime 1km LST')\nMap.addLayer(gf_night_1km.first().multiply(0.1),{min:-50,max:30,palette:palettes.cmocean.Balance[7]},' Nighttime 1km LST')\n", "39646c35f93d2af31a6993db773dac8d": "// Get a color from a day or night\r\nvar classColor = ee.Dictionary({\r\n  'D': '0565A6',\r\n  'N': '229A00'\r\n});\r\n\r\nvar classes = ['D', 'N'];\r\n\r\nfunction addStyle(pt) {\r\n  var size = ee.Number(pt.get('bright_ti4')).divide(100);\r\n  var color = classColor.get(pt.get('daynight'));\r\n  return pt.set('styleProperty', ee.Dictionary({'pointSize': size, 'color': color}));\r\n}\r\n\r\n// Make a FeatureCollection out of the power plant data table\r\nvar pp = ee.FeatureCollection(viirs_2012).map(addStyle);\r\n\r\nMap.addLayer((pp.filter(ee.Filter.eq('daynight', 'D')).style({styleProperty: 'styleProperty',neighborhood:50})),{},'Daytime Fires',true,0.65)\r\nMap.addLayer((pp.filter(ee.Filter.eq('daynight', 'N')).style({styleProperty: 'styleProperty',neighborhood:50})),{},'Nighttime Fires',true,0.65)", "e982f11b610438862eb908e22c2cc088": "// https://doi.org/10.1038/s41597-021-01048-w\n\nvar State_boundaries = ee.FeatureCollection('users/giswqs/MRB/State_Boundaries');\nvar State_style = State_boundaries.style({'color': '808080', 'width':1, 'fillColor': '00000000'});\n\nvar MRB_boundary = ee.FeatureCollection('users/giswqs/MRB/MRB_Boundary');\nvar MRB_style = MRB_boundary.style({'color': '000000', 'width':2, 'fillColor': '00000000'});\n\nvar floodplain = ee.Image('users/giswqs/MRB/USGS_Floodplain');\n\nvar class_values = [34, 38, 46, 50, 62];\nvar class_palette = ['c500ff', '00ffc5', '00a9e6', '73004d', '004d73'];\n\nvar img_1950 = ee.Image('users/giswqs/MRB/Major_Transitions_1941_1950');\nimg_1950 = img_1950.set('b1_class_values', class_values);\nimg_1950 = img_1950.set('b1_class_palette', class_palette);\n\nvar img_1960 = ee.Image('users/giswqs/MRB/Major_Transitions_1941_1960');\nimg_1960 = img_1960.set('b1_class_values', class_values);\nimg_1960 = img_1960.set('b1_class_palette', class_palette);\n\nvar img_1970 = ee.Image('users/giswqs/MRB/Major_Transitions_1941_1970');\nimg_1970 = img_1970.set('b1_class_values', class_values);\nimg_1970 = img_1970.set('b1_class_palette', class_palette);\n\nvar img_1980 = ee.Image('users/giswqs/MRB/Major_Transitions_1941_1980');\nimg_1980 = img_1980.set('b1_class_values', class_values);\nimg_1980 = img_1980.set('b1_class_palette', class_palette);\n\nvar img_1990 = ee.Image('users/giswqs/MRB/Major_Transitions_1941_1990');\nimg_1990 = img_1990.set('b1_class_values', class_values);\nimg_1990 = img_1990.set('b1_class_palette', class_palette);\n\nvar img_2000 = ee.Image('users/giswqs/MRB/Major_Transitions_1941_2000');\nimg_2000 = img_2000.set('b1_class_values', class_values);\nimg_2000 = img_2000.set('b1_class_palette', class_palette);\n\n\n// Set position of panel\nvar title = ui.Panel({\n  style: {\n    position: \"top-center\",\n    padding: \"8px 15px\",\n  },\n});\n\n// Create legend title\nvar titleLabel = ui.Label({\n  value: \"Mississippi River Basin Floodplain Land Use Change (1941-2000)\",\n  style: {\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    margin: \"0 0 4px 0\",\n    padding: \"0\",\n  },\n});\n\ntitle.add(titleLabel);\nMap.add(title);\n\n// Set position of panel\nvar legend = ui.Panel({\n  style: {\n    position: \"bottom-left\",\n    padding: \"8px 15px\",\n  },\n});\n\n// Create legend title\nvar legendTitle = ui.Label({\n  value: \"Legend\",\n  style: {\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    margin: \"0 0 4px 0\",\n    padding: \"0\",\n  },\n});\n\n// Add the title to the panel\nlegend.add(legendTitle);\n// Creates and styles 1 row of the legend\nvar makeRow = function(color, name) {\nvar colorBox = ui.Label({\nstyle: {\nbackgroundColor: '#' + color,\npadding: '8px',\nmargin: '0 0 4px 0'\n}\n});\n// Create the label filled with the description text\nvar description = ui.Label({\nvalue: name,\nstyle: {margin: '0 0 4px 6px'}\n});\n\n// Return the panel\nreturn ui.Panel({\nwidgets: [colorBox, description],\nlayout: ui.Panel.Layout.Flow('horizontal')\n});\n};\n// Name of each legend input\nvar names =['Forest to Developed', 'Forest to Agriculture', 'Grassland to Agriculture', 'Agriculture to Developed', 'Wetland to Agriculture', 'Floodplain'];\n// Palette with the colors\nvar palette =['c500ff', '00ffc5', '00a9e6', '73004d', '004d73', 'cccccc'];\n// Add the colors and names\nfor (var i = 0; i < 6; i++) {\nlegend.add(makeRow(palette[i], names[i]));\n}\n// Add legend to map (alternatively you can also print the legend to the console)\nMap.add(legend);\n\n\n// Map.centerObject(MRB_boundary, 4);\nMap.addLayer(floodplain, {'palette': ['cccccc']}, 'Floodplain', true, 0.5 );\nMap.addLayer(img_2000, {}, 'Major Transitions 1941-2000');\nMap.addLayer(img_1990, {}, 'Major Transitions 1941-1990');\nMap.addLayer(img_1980, {}, 'Major Transitions 1941-1980');\nMap.addLayer(img_1970, {}, 'Major Transitions 1941-1970');\nMap.addLayer(img_1960, {}, 'Major Transitions 1941-1960');\nMap.addLayer(img_1950, {}, 'Major Transitions 1941-1950');\n\nMap.addLayer(State_style, {}, 'State Boundaries');\nMap.addLayer(MRB_style, {}, 'MRB Boundary');\n", "0f71c9417a141c674c8dbf55f60a6f65": "Map.addLayer(fire_occurrence,{'color':'red'},'MTBS Fire Occurrence')\nMap.addLayer(area_boundaries,{'color':'orange'},'MTBS burned area boundaries')", "716e711368f4df16a5f61356691cb610": "print(slrdem.size())\n\n//Function to attach nominal scale to collection\nvar scales = function(image){\n  var b1proj = image.select('b1').projection();\n  var b1scale = image.select('b1').projection().nominalScale();\nreturn image.set('scale',ee.Number(b1scale).round())\n}\n\nvar ns = slrdem.map(scales)\n\n//print distribution of nominal scale across collection\nprint(ns.aggregate_histogram('scale'))\n\n//filter by nominal scale\nvar ns_3m =ns.filter(ee.Filter.eq('scale',3)) \nvar image = ns_3m.mosaic().setDefaultProjection('EPSG:3857',null,3)\nMap.addLayer(image.updateMask(image.gt(-9999)))\nMap.addLayer(ee.Terrain.products(image))", "74ffc1eb0caabbbfaea535537829dda5": "var c1 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Freshwater Forested/Shrub Wetland')).map(function(feature){return feature.set('WETLAND_CD',1).copyProperties(feature)})\nvar c2 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Freshwater Emergent Wetland')).map(function(feature){return feature.set('WETLAND_CD',2).copyProperties(feature)})\nvar c3 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Freshwater Pond')).map(function(feature){return feature.set('WETLAND_CD',3).copyProperties(feature)})\nvar c4 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Estuarine and Marine Wetland')).map(function(feature){return feature.set('WETLAND_CD',4).copyProperties(feature)})\nvar c5 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Riverine')).map(function(feature){return feature.set('WETLAND_CD',5).copyProperties(feature)})\nvar c6 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Lake')).map(function(feature){return feature.set('WETLAND_CD',6).copyProperties(feature)})\nvar c7 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Estuarine and Marine Deepwater')).map(function(feature){return feature.set('WETLAND_CD',7).copyProperties(feature)})\nvar c8 = wetlands.filter(ee.Filter.eq('WETLAND_TY','Other')).map(function(feature){return feature.set('WETLAND_CD',8).copyProperties(feature)})\n\nvar empty = ee.Image().byte();\nvar vis = {min:1, max:8, \npalette: ['#008837','#7FC31C','#688CC0','#66C2A5','#0190BF','#13007C','#007C88','#B28653']}\n\nvar combined_collection = ee.FeatureCollection([c1,c2,c3,c4,c5,c5,c6,c7,c8]).flatten()\n\n\nvar wetlands_layer = combined_collection.reduceToImage(['WETLAND_CD'], ee.Reducer.mean())\nMap.addLayer(wetlands_layer, vis, 'Wetland layer');\n\n\n// Define a dictionary which will be used to make legend and visualize image on map\nvar dict = {\n  \"names\": [\n    \"Freshwater Forested/Shrub Wetland\",\n    \"Freshwater Emergent Wetland\",\n    \"Freshwater Pond\",\n    \"Estuarine and Marine Wetland\",\n    \"Riverine\", \n    \"Lake\",\n    \"Estuarine and Marine Deepwater\",\n    \"Other\",\n  ],\n  \"colors\": ['#008837','#7FC31C','#688CC0','#66C2A5','#0190BF','#13007C','#007C88','#B28653']};\n\n// Create a panel to hold the legend widget\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n\n// Function to generate the legend\nfunction addCategoricalLegend(panel, dict, title) {\n  \n  // Create and add the legend title.\n  var legendTitle = ui.Label({\n    value: title,\n    style: {\n      fontWeight: 'bold',\n      fontSize: '18px',\n      margin: '0 0 4px 0',\n      padding: '0'\n    }\n  });\n  panel.add(legendTitle);\n  \n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\n  panel.add(loading);\n  \n  // Creates and styles 1 row of the legend.\n  var makeRow = function(color, name) {\n    // Create the label that is actually the colored box.\n    var colorBox = ui.Label({\n      style: {\n        backgroundColor: color,\n        // Use padding to give the box height and width.\n        padding: '8px',\n        margin: '0 0 4px 0'\n      }\n    });\n  \n    // Create the label filled with the description text.\n    var description = ui.Label({\n      value: name,\n      style: {margin: '0 0 4px 6px'}\n    });\n  \n    return ui.Panel({\n      widgets: [colorBox, description],\n      layout: ui.Panel.Layout.Flow('horizontal')\n    });\n  };\n  \n  // Get the list of palette colors and class names from the image.\n  var palette = dict['colors'];\n  var names = dict['names'];\n  loading.style().set('shown', false);\n  \n  for (var i = 0; i < names.length; i++) {\n    panel.add(makeRow(palette[i], names[i]));\n  }\n  \n  Map.add(panel);\n  \n}\n\naddCategoricalLegend(legend, dict, 'NWI Categorical Legend');", "3811f6aab0c7b6035494f8c804956e30": "var objects = ee.data.listAssets('projects/sat-io/open-datasets/NHD/NHD_MO')\nprint('Assets in State NHD Folder', objects['assets'])\n\nvar geometry = ee.Feature(ee.FeatureCollection('projects/sat-io/open-datasets/NHD/NHD_MO/WBDHU10').first())\n\n//lets zoom to a WBDHU10 and add\nMap.centerObject(geometry,11)\nMap.addLayer(ee.FeatureCollection(geometry).style({fillColor: '00000000',color: 'FF5500'}),{},'WBDHU10')\n\n//Add NHD Flowline\nMap.addLayer(ee.FeatureCollection('projects/sat-io/open-datasets/NHD/NHD_MO/NHDFlowline').filterBounds(geometry.geometry()).style({color: '2E5984'}),{},'NHD Flowline')\n\n\n//Add NHD point layer\nMap.addLayer(ee.FeatureCollection('projects/sat-io/open-datasets/NHD/NHD_MO/NHDPoint').filterBounds(geometry.geometry()).style({color: '00FF00'}),{},'NHD Point')\n\n//Add waterbody layer\nMap.addLayer(ee.FeatureCollection('projects/sat-io/open-datasets/NHD/NHD_MO/NHDWaterbody').filterBounds(geometry.geometry()).style({fillColor: '00000000',color: '008080'}),{},'NHD Waterbody')\n", "0c664cc64c35a964de7e36ffe54b41d4": "//Indigenius Territories from native-land.ca\n\nMap.addLayer(territories,{'color':'red'},'Territories',false)\n\nvar getarea = function(feature) {\n  var keepProperties = ['id', 'FrenchDesc', 'FrenchName', 'Name','Slug','color','descriptio'];\n  var geom_area = ee.Feature(feature).area().divide(1000000);\n  return feature.set('area',geom_area).copyProperties(feature, keepProperties)\n}\n\nvar terr= territories.map(getarea)\nprint(terr.first())\n\n// Create an empty image into which to paint the features, cast to byte.\nvar empty = ee.Image().byte();\n\n// Paint the edges with different colors, display.\nvar outlines = empty.paint({\n  featureCollection: terr,\n  color: 'area',\n  width: 4\n});\n\nvar palette = ['#a50026','#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695'];\nMap.addLayer(outlines, {palette: palette,min:3.37,max:38921}, 'Indigenous Territories');\n", "f2c958a9b126f432c8418a6adf671789": "print('Polarization VV',VV.first())\nprint('Polarization VH',VH.first())\n\n//var palettes = require('users/gena/packages:palettes')\nprint('VV count',VV.size())\nprint('VH count',VH.size())\nvar palette = ['#081d58','#253494','#225ea8','#1d91c0','#41b6c4','#7fcdbb','#c7e9b4','#edf8b1','#ffffd9']\n\n\nMap.addLayer(VV.mosaic().clip(table),{min:-200,max:-60,palette:palette},'Backscatter VV',false)\n\nvar palette = ['#f7fcf5','#e5f5e0','#c7e9c0','#a1d99b','#74c476','#41ab5d','#238b45','#006d2c','#00441b']\nMap.addLayer(VH.mosaic().clip(table),{min:-237,max:-70,palette:palette},'Backscatter VH',false)\n\nvar Dark\n = \n[\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text.fill\",\n    \"stylers\": [\n      {\n        \"saturation\": 36\n      },\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 40\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.text.stroke\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 16\n      }\n    ]\n  },\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"labels.icon\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 20\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 17\n      },\n      {\n        \"weight\": 1.2\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"administrative\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 20\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"poi\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 21\n      }\n    ]\n  },\n  {\n    \"featureType\": \"poi\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"visibility\": \"simplified\"\n      },\n      {\n        \"color\": \"#8a4040\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#ffffff\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 17\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"geometry.stroke\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 29\n      },\n      {\n        \"weight\": 0.2\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.arterial\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 18\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.arterial\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"color\": \"#ffffff\"\n      },\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.local\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 16\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.local\",\n    \"elementType\": \"geometry.fill\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"color\": \"#faf2f2\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#000000\"\n      },\n      {\n        \"lightness\": 19\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"transit\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"geometry\",\n    \"stylers\": [\n      {\n        \"color\": \"#b4bcc2\"\n      },\n      {\n        \"lightness\": 17\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"water\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  }\n]\nMap.setOptions('Dark', {Dark\n: Dark\n})", "cab4e587c9fa6d86e9d848432efe874b": "var vis={min: 1, max: 5, palette: [\"08306b\",\"08519c\",\"2171b5\",\"4292c6\",\"6baed6\"]};\r\nMap.addLayer(osm_water.median(),vis,'OSM Water Global')", "b1a97a8988c176ff7fa4df5ee6509c5d": "print(plastic.toList(20))\n\nfunction addStyle(pt) {\n  var size = ee.Number(pt.get('mpw')).sqrt().divide(2000).add(1);\n  return pt.set('styleProperty', ee.Dictionary({'pointSize': size, 'color': '#0EA7A5','opacity':0.4}))\n}\nvar sampler = plastic.map(addStyle)\nprint(sampler.first())\nMap.addLayer(sampler.style({styleProperty: 'styleProperty'}),{},'River Plastic Emissions',true,0.65)\n", "8fe0fcfacbef1072b8cc7a2b68391616": "//Import datasets\nvar bd_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/bd_mean');\nvar clay_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/clay_mean');\nvar ksat_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/ksat_mean');\nvar n_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/n_mean');\nvar om_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/om_mean');\nvar ph_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/ph_mean');\nvar sand_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/sand_mean');\nvar silt_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/silt_mean');\nvar theta_r_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/theta_r_mean');\nvar theta_s_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/theta_s_mean');\nvar lambda_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/lambda_mean')\nvar hb_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/hb_mean')\nvar alpha_mean = ee.ImageCollection('projects/sat-io/open-datasets/polaris/alpha_mean')\n\n//Import palette\nvar palettes = require('users/gena/packages:palettes');\n\nMap.addLayer(bd_mean.first(),{min:0.67,max:1.6,palette:palettes.cmocean.Delta[7]},'bd_mean_0_5',false)\nMap.addLayer(clay_mean.first(),{min:3,max:55,palette:palettes.cmocean.Speed[7]},'clay_mean_0_5')\nMap.addLayer(ksat_mean.first(),{min:-1,max:1.8,palette:palettes.cmocean.Haline[7]},'ksat_mean_0_5',false)\nMap.addLayer(n_mean.first(),{min:1.22,max:1.6,palette:palettes.cmocean.Solar[7]},'n_mean_0_5')\nMap.addLayer(om_mean.first(),{min:-0.8,max:1.8,palette:palettes.cmocean.Gray[7]},'om_mean_0_5',false)\nMap.addLayer(ph_mean.first(),{min:4,max:9,palette:palettes.cmocean.Oxy[7]},'ph_mean_0_5')\nMap.addLayer(sand_mean.first(),{min:5,max:90,palette:palettes.cmocean.Dense[7]},'sand_mean_0_5',false)\nMap.addLayer(silt_mean.first(),{min:2,max:80,palette:palettes.cmocean.Curl[7]},'silt_mean_0_5')\nMap.addLayer(theta_r_mean.first(),{min:0.022,max:0.15,palette:palettes.cmocean.Algae[7]},'theta_r_mean_0_5',false)\nMap.addLayer(theta_s_mean.first(),{min:0.4,max:0.8,palette:palettes.cmocean.Turbid[7]},'theta_s_mean_0_5',false)\nMap.addLayer(alpha_mean.first(),{min:-0.15,max:0.2,palette:palettes.cmocean.Speed[7]},'alpha_mean_0_5',false)\nMap.addLayer(hb_mean.first(),{min:-0.15,max:0.75,palette:palettes.cmocean.Matter[7]},'hb_mean_0_5',false)\nMap.addLayer(lambda_mean.first(),{min:0.2,max:0.5,palette:palettes.cmocean.Balance[7]},'lambda_mean_0_5')", "084178bccbca747184eb2eb2759e4a5f": "Map.addLayer(avg_area.updateMask(avg_area.neq(0)),{'min':50,'max':2500,'palette':['#c51b7d','#de77ae','#f1b6da','#fde0ef','#f7f7f7','#e6f5d0','#b8e186','#7fbc41','#4d9221']},'Building Average Area')\nMap.addLayer(max_area.updateMask(max_area.neq(0)),{'min':50,'max':2000,'palette':['#543005','#8c510a','#bf812d','#dfc27d','#f6e8c3','#f5f5f5','#c7eae5','#80cdc1','#35978f','#01665e','#003c30']},'Building Max Area')\nMap.addLayer(min_area.updateMask(min_area.neq(0)),{'min':50,'max':1500,'palette':['#a50026','#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695']},'Building Min Area')\nMap.addLayer(total_area.updateMask(total_area.neq(0)),{'min':1,'max':646,'palette':['#fff7ec','#fee8c8','#fdd49e','#fdbb84','#fc8d59','#ef6548','#d7301f','#b30000','#7f0000']},'Building Total Area')\nMap.addLayer(centroid_count.updateMask(centroid_count.neq(0)),{'min':1,'max':3,'palette':[\"b40a01\",\"ff3608\",\"ffc46c\",\"fff8a7\",\"cbff87\",\"52ff58\",\"3bff89\",\"35ffda\",\"1f4fff\"]},'Building Centroid Count')\nMap.addLayer(building_count.updateMask(building_count.neq(0)),{'min':1,'max':7,'palette':['#b35806','#f1a340','#fee0b6','#f7f7f7','#d8daeb','#998ec3','#542788']},'Building Count')\n\n\nvar Stranger_Things\n = \n[\n  {\n    \"featureType\": \"all\",\n    \"elementType\": \"all\",\n    \"stylers\": [\n      {\n        \"invert_lightness\": true\n      },\n      {\n        \"saturation\": \"-9\"\n      },\n      {\n        \"lightness\": \"0\"\n      },\n      {\n        \"visibility\": \"simplified\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"landscape.man_made\",\n    \"elementType\": \"all\",\n    \"stylers\": [\n      {\n        \"weight\": \"1.00\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"all\",\n    \"stylers\": [\n      {\n        \"weight\": \"0.49\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"labels\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      },\n      {\n        \"weight\": \"0.01\"\n      },\n      {\n        \"lightness\": \"-7\"\n      },\n      {\n        \"saturation\": \"-35\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"labels.text\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"labels.text.stroke\",\n    \"stylers\": [\n      {\n        \"visibility\": \"off\"\n      }\n    ]\n  },\n  {\n    \"featureType\": \"road.highway\",\n    \"elementType\": \"labels.icon\",\n    \"stylers\": [\n      {\n        \"visibility\": \"on\"\n      }\n    ]\n  }\n]\nMap.setOptions('Stranger_Things', {Stranger_Things: Stranger_Things})", "acedad57b233b5c69993f79f344f5194": "Map.addLayer(\n  realsat.style({\n    fillColor: '00000000',\n    color: '008D97',\n  }),{},'RealSAT'\n);", "345fa07d279e29d1597e0ddddbaffff5": "// 01 repo\r\nvar piscoeopm_clim = ee.ImageCollection(\r\n  \"users/lgutierrezlf/PISCOeo_pm/climatology\"\r\n);\r\nvar sst = piscoeopm_clim.filterDate(\"2016-01-01\", \"2016-12-31\");\r\nvar vis = { min: 0, max: 2000, palette: \"#E1F3FF,#7DC0ED,#3291D0,#02548A\" };\r\nvar composite = sst.sum().visualize(vis);\r\nvar compositeLayer = ui.Map.Layer(composite).setName(\"Climatology\");\r\nvar mapPanel = ui.Map();\r\nvar layers = mapPanel.layers();\r\nlayers.add(compositeLayer, \"Climatology\");\r\n// 02 Panel General\r\nvar inspectorPanel = ui.Panel({ style: { width: \"30%\" } });\r\nvar intro = ui.Panel([\r\n  ui.Label({\r\n    value: \"PISCOeo_pm evapotranspiration - Explorer\",\r\n    style: { fontSize: \"20px\", fontWeight: \"bold\" },\r\n  }),\r\n  ui.Label(\"Click a location to see its time series of evapotranspiration.\"),\r\n]);\r\ninspectorPanel.add(intro);\r\nvar lon = ui.Label();\r\nvar lat = ui.Label();\r\ninspectorPanel.add(ui.Panel([lon, lat], ui.Panel.Layout.flow(\"horizontal\")));\r\ninspectorPanel.add(ui.Label(\"[Chart]\"));\r\ninspectorPanel.add(ui.Label(\"[Legend]\"));\r\n// 03 Panel time series\r\nvar generateChart = function (coords) {\r\n  lon.setValue(\"lon: \" + coords.lon.toFixed(2));\r\n  lat.setValue(\"lat: \" + coords.lat.toFixed(2));\r\n  var point = ee.Geometry.Point(coords.lon, coords.lat);\r\n  var dot = ui.Map.Layer(point, { color: \"000000\" }, \"point location\");\r\n  mapPanel.layers().set(1, dot);\r\n  var sstChart = ui.Chart.image.series(sst, point, ee.Reducer.mean(), 500);\r\n  sstChart.setOptions({\r\n    title: \"PISCOeo_pm: Climatology\",\r\n    vAxis: { title: \"Eo_pm (mm/month)\" },\r\n    hAxis: { title: \"Month\", format: \"MM\", gridlines: { count: 12 } },\r\n    series: {\r\n      0: {\r\n        color: \"steelblue\",\r\n        lineWidth: 0.7,\r\n        pointsVisible: false,\r\n        pointSize: 0,\r\n      },\r\n    },\r\n    legend: { position: \"right\" },\r\n  });\r\n  inspectorPanel.widgets().set(2, sstChart);\r\n};\r\n// 04 Panel Legend\r\nfunction makeColorBarParams(palette) {\r\n  return {\r\n    bbox: [0, 0, 1, 0.1],\r\n    dimensions: \"100x10\",\r\n    format: \"png\",\r\n    min: 0,\r\n    max: 1,\r\n    palette: palette,\r\n  };\r\n}\r\nvar colorBar = ui.Thumbnail({\r\n  image: ee.Image.pixelLonLat().select(0),\r\n  params: makeColorBarParams(vis.palette),\r\n  style: { stretch: \"horizontal\", margin: \"0px 8px\", maxHeight: \"24px\" },\r\n});\r\nvar legendLabels = ui.Panel({\r\n  widgets: [\r\n    ui.Label(vis.min, { margin: \"4px 8px\" }),\r\n    ui.Label(vis.max / 2, {\r\n      margin: \"4px 8px\",\r\n      textAlign: \"center\",\r\n      stretch: \"horizontal\",\r\n    }),\r\n    ui.Label(vis.max, { margin: \"4px 8px\" }),\r\n  ],\r\n  layout: ui.Panel.Layout.flow(\"horizontal\"),\r\n});\r\nvar legendTitle = ui.Label({\r\n  value: \"Map Legend: Evapotranspiration (mm)\",\r\n  style: { fontWeight: \"bold\" },\r\n});\r\nvar legendPanel = ui.Panel([legendTitle, colorBar, legendLabels]);\r\ninspectorPanel.widgets().set(3, legendPanel);\r\n// 05 Map\r\nmapPanel.onClick(generateChart);\r\nmapPanel.style().set(\"cursor\", \"crosshair\");\r\nvar initialPoint = ee.Geometry.Point(-75.5, -10);\r\nmapPanel.centerObject(initialPoint, 6);\r\nui.root.clear();\r\nui.root.add(ui.SplitPanel(inspectorPanel, mapPanel));\r\ngenerateChart({\r\n  lon: initialPoint.coordinates().get(0).getInfo(),\r\n  lat: initialPoint.coordinates().get(1).getInfo(),\r\n});\r\n", "ce70f96b62203b44da0c224a10dc3eab": "Map.addLayer(\r\n  ee.FeatureCollection(rwi),{},'Relative Wealth Index'\r\n);", "7d1f97bbc04cbf351aa38246d38246ed": "var palettes = require('users/gena/packages:palettes')\r\n\r\nMap.addLayer(forest_increment.select('classification_2019'),{min:0,max:1,palette:palettes.colorbrewer.Blues[3]},'Forest Increment 2019')\r\nMap.addLayer(forest_loss.select('classification_2019'),{min:0,max:1,palette:palettes.colorbrewer.Reds[3]},'Forest Loss 2019')\r\nMap.addLayer(forest_extent.select('classification_2019'),{min:0,max:1,palette:palettes.colorbrewer.Oranges[3]},'Forest Extent 2019')\r\nMap.addLayer(forest_age.select('classification_2019'),{min:0,max:6,palette:palettes.colorbrewer.Greens[7]},'Forest Age 2019')\r\n\r\n\r\nvar SubtleGrayscale\r\n= \r\n[\r\n  {\r\n    \"featureType\": \"administrative\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": \"-100\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.province\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"landscape\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": 65\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": \"50\"\r\n      },\r\n      {\r\n        \"visibility\": \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": \"-100\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.highway\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.arterial\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"30\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.local\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"40\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"transit\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"visibility\": \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"hue\": \"#ffff00\"\r\n      },\r\n      {\r\n        \"lightness\": -25\r\n      },\r\n      {\r\n        \"saturation\": -97\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"labels\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": -25\r\n      },\r\n      {\r\n        \"saturation\": -100\r\n      }\r\n    ]\r\n  }\r\n]\r\nMap.setOptions('SubtleGrayscale', {SubtleGrayscale\r\n: SubtleGrayscale\r\n})\r\n", "4dadf30cb45f181e301fcd4f17dfdb2d": "Map.addLayer(sci_user_loc, {}, 'SCI User Loc')\nMap.addLayer(sci_fr_loc, {}, 'SCI FR Loc')", "3a1cfb868beb449683f32bdd77f65f1b": "var caco3 = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/chemical/caco3');\nvar cec = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/chemical/cec');\nvar cec_profile = ee.ImageCollection('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/chemical/cec_profile');\nvar ec = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/chemical/ec');\nvar ec_profile = ee.ImageCollection('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/chemical/ec_profile');\nvar ph = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/chemical/ph');\nvar ph_profile = ee.ImageCollection('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/chemical/ph_profile');\nvar sar = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/chemical/sar');\nvar som = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/chemical/som');\nvar som_max = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/chemical/som_max');\nvar hydrologic_group = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/hydrologic_group');\nvar kw_025 = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/kw_025');\nvar lcc_i = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/lcc_i');\nvar lcc_ni = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/lcc_ni');\nvar resdept = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/resdept');\nvar soil_depth = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/soil_depth');\nvar soil_order = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/soil_order');\nvar soil_temp_regime = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/soil_temp_regime');\nvar survey_type = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/survey_type');\nvar wind_erodibility_group = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/wind_erodibility_group');\nvar wind_erodibility_index = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/land_use/wind_erodibility_index');\nvar bulk_density = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/bulk_density');\nvar clay = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/clay');\nvar clay_profile = ee.ImageCollection('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/clay_profile');\nvar drainage_class = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/drainage_class');\nvar ksat_05 = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/ksat_05');\nvar ksat_max = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/ksat_max');\nvar ksat_mean = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/ksat_mean');\nvar ksat_min = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/ksat_min');\nvar rf_025 = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/rf_025');\nvar sand = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/sand');\nvar sand_profile = ee.ImageCollection('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/sand_profile');\nvar silt = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/silt');\nvar silt_profile = ee.ImageCollection('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/silt_profile');\nvar soil_texture_profile = ee.ImageCollection('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/soil_texture_profile');\nvar water_storage = ee.Image('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/water_storage');\nvar water_storage_profile = ee.ImageCollection('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/physical/water_storage_profile');\nvar  soil_color = ee.ImageCollection('projects/earthengine-legacy/assets/projects/sat-io/open-datasets/CSRL_soil_properties/soil_color');\n\n\nvar palette={'min':0,'max':880,palette: [\"#440154\",\"#443a83\",\"#31688e\",\"#21908c\",\"#35b779\",\"#fde725\"]}\nMap.addLayer(caco3,palette,'CaCO3')\n", "4e15cc9ee4fe5b43cac46cfbe28f2a5e": "var palettes = require('users/gena/packages:palettes')\n\nMap.setCenter(25.654, -29.558,6)\nMap.addLayer(SOC30_mean.median().divide(100),{min:0.86,max:16,palette: palettes.cmocean.Algae[7]},'SOC median')\nMap.addLayer(SOC30_trend.median().divide(100),{min:-20,max:24,palette: palettes.cmocean.Curl[7]},'SOC trend')", "b17184d3dd1b54434be2a2abd1fc63ad": "print('Assets for Soil Canopy Height',ch)\r\nprint('Assets for Forest Carbon',fc)\r\nprint('Assets for Soil Carbon Stock',sc)\r\nprint('Assets for Soil Carbon Stock',scc)\r\n\r\n//Import palette\r\nvar palettes = require('users/gena/packages:palettes');\r\n\r\nMap.addLayer(ee.Image(ch.toList(3).get(-1)),{min:5.5,max:28,palette:palettes.cmocean.Delta[7]},'Canopy Height Max')\r\nMap.addLayer(fc.first(),{min:0.62,max:12,palette:palettes.cmocean.Speed[7]},'Forest Carbon stock')\r\nMap.addLayer(sc.first(),{min:6.5,max:327,palette:palettes.cmocean.Dense[7]},'Soil Carbon stock')\r\nMap.addLayer(scc.first(),{min:24,max:460,palette:palettes.cmocean.Matter[7]},'Soil Carbon Concentration 0cm')", "dff3040051231efbb999ea8f2403add0": "Map.addLayer(nematode)\r\nprint(nematode.size())\r\n", "0c9d51577e15437d2b17728079bb01f2": "var dict = {\"names\": [\"Contiguous (indigenous) Forest (combined very high, high, medium)\", \"Contiguous Low Forest & Thicket (combined classes)\", \"Dense Forest & Woodland (35 - 75% cc)\", \"Open Woodland (10 - 35% cc)\", \"Contiguous & Dense Planted Forest (combined classes)\", \"Open & Sparse Planted Forest\", \"Temporary Unplanted Forest\", \"Low Shrubland (other regions)\", \"Low Shrubland (Fynbos)\", \"Low Shrubland (Succulent Karoo)\", \"Low Shrubland (Nama Karoo)\", \"Sparsely Wooded Grassland (5 - 10% cc)\", \"Natural Grassland\", \"Natural Rivers\", \"Natural Estuaries & Lagoons\", \"Natural Ocean, Coastal\", \"Natural Lakes\", \"Natural Pans (flooded @ obsv time)\", \"Artificial Dams (incl. canals)\", \"Artificial Sewage Ponds\", \"Artificial Flooded Mine Pits\", \"Herbaceous Wetlands (currently mapped)\", \"Herbaceous Wetlands (previous mapped extent)\", \"Mangrove Wetlands\", \"Natural Rock Surfaces\", \"Dry Pans\", \"Eroded Lands\", \"Sand Dunes (terrestrial)\", \"Coastal Sand Dunes & Beach Sand\", \"Bare Riverbed Material\", \"Other Bare\", \"Cultivated Commercial Permanent Orchards\", \"Cultivated Commercial Permanent Vines\", \"Cultivated Commercial Sugarcane Pivot Irrigated\", \"Commercial Permanent Pineapples\", \"Cultivated Commercial Sugarcane Non-Pivot (all other)\", \"Cultivated Emerging Farmer Sugarcane Non-Pivot (all other)\", \"Commercial Annuals Pivot Irrigated\", \"Commercial Annuals Non-Pivot Irrigated\", \"Commercial Annuals Crops Rain-Fed / Dryland / Non-Irrigated\", \"Subsistence / Small-Scale Annual Crops\", \"Fallow Land & Old Fields (Trees)\", \"Fallow Land & Old Fields (Bush)\", \"Fallow Land & Old Fields (Grass)\", \"Fallow Land & Old Fields (Bare)\", \"Fallow Land & Old Fields (Low Shrub)\", \"Residential Formal (Tree)\", \"Residential Formal (Bush)\", \"Residential Formal (low veg / grass)\", \"Residential Formal (Bare)\", \"Residential Informal (Tree)\", \"Residential Informal (Bush)\", \"Residential Informal (low veg / grass)\", \"Residential Informal (Bare)\", \"Village Scattered (bare only)\", \"Village Dense (bare only)\", \"Smallholdings (Tree)\", \"Smallholdings (Bush)\", \"Smallholdings (low veg / grass)\", \"Smallholdings (Bare)\", \"Urban Recreational Fields (Tree)\", \"Urban Recreational Fields (Bush)\", \"Urban Recreational Fields (Grass)\", \"Urban Recreational Fields (Bare)\", \"Commercial\", \"Industrial\", \"Roads & Rail (Major Linear)\", \"Mines: Surface Infrastructure\", \"Mines: Extraction Sites: Open Cast & Quarries combined\", \"Mines: Extraction Sites: Salt Mines\", \"Mines: Waste (Tailings) & Resource Dumps\", \"Land-fills\", \"Fallow Land & Old Fields (wetlands)\"], \"colors\": [\"#F2F2F2\", \"#065106\", \"#005F00\", \"#008500\", \"#F74006\", \"#F9764D\", \"#F9906C\", \"#B8ABD1\", \"#8FAB39\", \"#AC92C5\", \"#AC9CDA\", \"#85D285\", \"#D2B485\", \"#00009F\", \"#041FA7\", \"#0639AB\", \"#0D50AC\", \"#125FAC\", \"#1373B4\", \"#1D81B6\", \"#1F8EB8\", \"#06DEDC\", \"#06E0D0\", \"#9F1FEC\", \"#ffffe0\", \"#DCDAC5\", \"#F9E0E0\", \"#F9F9C5\", \"#F9F9A7\", \"#CDD2E0\", \"#ffffe0\", \"#A62C39\", \"#B31F5C\", \"#DB0000\", \"#9F3978\", \"#FF0000\", \"#F64D6C\", \"#381A12\", \"#521F1C\", \"#85402C\", \"#C5735F\", \"#C1436C\", \"#C55E82\", \"#D27592\", \"#E0AAB8\", \"#DB90A9\", \"#ECDB0F\", \"#F6EC13\", \"#F9F81F\", \"#FFFF29\", \"#EC82EC\", \"#F691E0\", \"#F99FCF\", \"#FFC5CF\", \"#ECC500\", \"#FFD91F\", \"#AC7879\", \"#B89192\", \"#C49C9E\", \"#D2B8B8\", \"#BFFF00\", \"#33FF33\", \"#66FF66\", \"#99FF99\", \"#C49F0D\", \"#8F8506\", \"#F9DD03\", \"#FFFF00\", \"#B30606\", \"#C50606\", \"#D21D1A\", \"#F95479\", \"#6CE7DC\"]}\r\n\r\n// Create a panel to hold the legend widget\r\nvar legend = ui.Panel({\r\n  style: {\r\n    position: 'bottom-left',\r\n    padding: '8px 15px'\r\n  }\r\n});\r\n\r\n// Function to generate the legend\r\nfunction addCategoricalLegend(panel, dict, title) {\r\n  \r\n  // Create and add the legend title.\r\n  var legendTitle = ui.Label({\r\n    value: title,\r\n    style: {\r\n      fontWeight: 'bold',\r\n      fontSize: '12px',\r\n      margin: '0 0 4px 0',\r\n      padding: '0'\r\n    }\r\n  });\r\n  panel.add(legendTitle);\r\n  \r\n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\r\n  panel.add(loading);\r\n  \r\n  // Creates and styles 1 row of the legend.\r\n  var makeRow = function(color, name) {\r\n    // Create the label that is actually the colored box.\r\n    var colorBox = ui.Label({\r\n      style: {\r\n        backgroundColor: color,\r\n        // Use padding to give the box height and width.\r\n        padding: '8px',\r\n        margin: '0 0 4px 0'\r\n      }\r\n    });\r\n  \r\n    // Create the label filled with the description text.\r\n    var description = ui.Label({\r\n      value: name,\r\n      style: {margin: '0 0 2px 3px'}\r\n    });\r\n  \r\n    return ui.Panel({\r\n      widgets: [colorBox, description],\r\n      layout: ui.Panel.Layout.Flow('horizontal')\r\n    });\r\n  };\r\n  \r\n  // Get the list of palette colors and class names from the image.\r\n  var palette = dict['colors'];\r\n  var names = dict['names'];\r\n  loading.style().set('shown', false);\r\n  \r\n  for (var i = 0; i < names.length; i++) {\r\n    panel.add(makeRow(palette[i], names[i]));\r\n  }\r\n  \r\n  Map.add(panel);\r\n  \r\n}\r\n\r\n\r\n/*\r\n  // Display map and legend ///////////////////////////////////////////////////////////////////////////////\r\n*/\r\n\r\n// Add the legend to the map\r\naddCategoricalLegend(legend, dict, 'South African National Land Cover 2018');\r\n\r\n// Add USDM Image image to the map\r\nMap.addLayer(sa_nlc2018, {min:1, max:73, palette:dict['colors']}, 'South African National Land Cover 2018')\r\n", "769befc4e306957b0824e3668fbba709": "\n//Import palette\nvar palettes = require('users/gena/packages:palettes')\n\n// Fire Regime\nMap.addLayer(vcc,{'min':2,'max':174,palette: palettes.colorbrewer.Dark2[7]},'Vegetation Condition Class')\nMap.addLayer(vdep,{'min':24,'max':175,palette: palettes.cmocean.Haline[7]},'Vegetation Departure Index')\nMap.addLayer(sclass,{'min':2,'max':174,palette: palettes.cmocean.Amp[7]},'Succession Classes')\n", "09c4f203ccab064d0acdfa55dfdad9f7": "var HydraFloods_Deep_Learning_Output = ee.Image(\"users/tjm0042/Hydrafloods_Outputs/TensorFlow_Surface_Water_Model_Mosaic\")\r\nMap.setCenter(104.9614, 12.2642,9)\r\nvar palettes = require('users/gena/packages:palettes');\r\nMap.addLayer(HydraFloods_Deep_Learning_Output,{min: 0,max: 1, palette: palettes.cmocean.Tempo[7]},\r\n\"HYDRAFloods TensorFlow Model Approach: Joint Research Centre Adjusted Learning Rate Binary Cross Entropy Dice\")\r\n\r\n//Add a grayscale map to help higlight the feature\r\nvar SubtleGrayscale\r\n = \r\n[\r\n  {\r\n    \"featureType\": \"administrative\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": \"-100\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.province\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"landscape\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": 65\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": \"50\"\r\n      },\r\n      {\r\n        \"visibility\": \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": \"-100\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.highway\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.arterial\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"30\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.local\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"40\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"transit\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"visibility\": \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"hue\": \"#ffff00\"\r\n      },\r\n      {\r\n        \"lightness\": -25\r\n      },\r\n      {\r\n        \"saturation\": -97\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"labels\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": -25\r\n      },\r\n      {\r\n        \"saturation\": -100\r\n      }\r\n    ]\r\n  }\r\n]\r\nMap.setOptions('SubtleGrayscale', {SubtleGrayscale: SubtleGrayscale})", "a229056c55d1fa89dfd01acbea0f6515": "//Scale and offset applied to imagery\r\nfunction scalor(image) {\r\n    return image.multiply(ee.Number(image.get('scale'))).add(ee.Number(image.get('offset'))).copyProperties(image, [\"system:time_start\",\"system:time_end\"])\r\n}\r\n\r\n//data on TerraClimate 2c and 4c for month October\r\nvar dataset2c = ee.ImageCollection(\"projects/sat-io/open-datasets/TERRACLIMATE/2C/tmax\").select('b10');\r\ndataset2c = dataset2c.map(scalor)\r\n\r\nvar dataset4c = ee.ImageCollection(\"projects/sat-io/open-datasets/TERRACLIMATE/4C/tmax\").select('b10');\r\ndataset4c = dataset4c.map(scalor)\r\n\r\n//print the contents\r\nprint('tmax2c',dataset2c);\r\nprint('tmax4c',dataset4c);\r\n\r\n//add layer\r\nMap.addLayer(dataset2c, maximumTemperatureVis, 'Maximum Temperature 2C');\r\nMap.addLayer(dataset4c, maximumTemperatureVis, 'Maximum Temperature 4C');\r\nMap.addLayer(point, {}, 'Location:Delhi');\r\n\r\n// Define the chart and print it to the console.\r\nvar chart =\r\n    ui.Chart.image\r\n    .seriesByRegion({\r\n        imageCollection: dataset2c,\r\n        band: 'b10',\r\n        regions: point,\r\n        reducer: ee.Reducer.mean(),\r\n        scale: 4000,\r\n        seriesProperty: 'label',\r\n        xProperty: 'system:time_start'\r\n    })\r\n    .setOptions({\r\n        title: 'dataset2c-1985-october(b10)',\r\n        hAxis: {\r\n            title: 'Date',\r\n            titleTextStyle: {\r\n                italic: false,\r\n                bold: true\r\n            }\r\n        },\r\n        vAxis: {\r\n            title: 'tmax (Celcius)',\r\n            titleTextStyle: {\r\n                italic: false,\r\n                bold: true\r\n            }\r\n        },\r\n        lineWidth: 5,\r\n        colors: ['f0af07', '0f8755', '76b349'],\r\n    });\r\nprint(chart);\r\n\r\n// Define the chart and print it to the console.\r\nvar chart =\r\n    ui.Chart.image\r\n    .seriesByRegion({\r\n        imageCollection: dataset4c,\r\n        band: 'b10',\r\n        regions: point,\r\n        reducer: ee.Reducer.mean(),\r\n        scale: 4000,\r\n        seriesProperty: 'label',\r\n        xProperty: 'system:time_start'\r\n    })\r\n    .setOptions({\r\n        title: 'dataset4c-1985-october(b10)',\r\n        hAxis: {\r\n            title: 'Date',\r\n            titleTextStyle: {\r\n                italic: false,\r\n                bold: true\r\n            }\r\n        },\r\n        vAxis: {\r\n            title: 'tmax (Celcius)',\r\n            titleTextStyle: {\r\n                italic: false,\r\n                bold: true\r\n            }\r\n        },\r\n        lineWidth: 5,\r\n        colors: ['f0af07', '0f8755', '76b349'],\r\n    });\r\nprint(chart);", "0b9bed4ff747bb4d13e6eb5a3d1c24a3": "Map.addLayer(tile30m)", "939a2201427201d6945d1b79c9bb2a46": "/*\nCategory\tDescription\nDO\tAbnormally Dry\nD1\tModerate Drought\nD2\tSevere Drought\nD3\tExtreme Drought\nD4\tExceptional Drought\n*/\n\nvar usdm = ee.Image(imageCollection.toList(imageCollection.size()).get(-1))\n\n// Define a dictionary which will be used to make legend and visualize image on map\nvar dict = {\n  \"names\": [\n    \"DO\tAbnormally Dry\", //1\n    \"D1 Moderate Drought\", //2\n    \"D2 Severe Drought\", //3\n    \"D3 Extreme Drought\",//4\n    \"D4 Exceptional Drought\", //5\n  ],\n  \"colors\": [\n    \"#FFFF00\", \n    \"#FCD37F\", \n    \"#FFAA00\",\n    \"#E60000\", \n    \"#730000\"\n  ]};\n\n// Create a panel to hold the legend widget\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n\n// Function to generate the legend\nfunction addCategoricalLegend(panel, dict, title) {\n  \n  // Create and add the legend title.\n  var legendTitle = ui.Label({\n    value: title,\n    style: {\n      fontWeight: 'bold',\n      fontSize: '18px',\n      margin: '0 0 4px 0',\n      padding: '0'\n    }\n  });\n  panel.add(legendTitle);\n  \n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\n  panel.add(loading);\n  \n  // Creates and styles 1 row of the legend.\n  var makeRow = function(color, name) {\n    // Create the label that is actually the colored box.\n    var colorBox = ui.Label({\n      style: {\n        backgroundColor: color,\n        // Use padding to give the box height and width.\n        padding: '8px',\n        margin: '0 0 4px 0'\n      }\n    });\n  \n    // Create the label filled with the description text.\n    var description = ui.Label({\n      value: name,\n      style: {margin: '0 0 4px 6px'}\n    });\n  \n    return ui.Panel({\n      widgets: [colorBox, description],\n      layout: ui.Panel.Layout.Flow('horizontal')\n    });\n  };\n  \n  // Get the list of palette colors and class names from the image.\n  var palette = dict['colors'];\n  var names = dict['names'];\n  loading.style().set('shown', false);\n  \n  for (var i = 0; i < names.length; i++) {\n    panel.add(makeRow(palette[i], names[i]));\n  }\n  \n  Map.add(panel);\n  \n}\n\n\n/*\n  // Display map and legend ///////////////////////////////////////////////////////////////////////////////\n*/\n\n// Add the legend to the map\naddCategoricalLegend(legend, dict, 'US Drought Monitor');\n\n// Add USDM Image image to the map\nMap.addLayer(usdm, {min:0, max:4, palette:dict['colors']}, usdm.get('system:index').getInfo())\n", "02f3f4401475dc5081ce707e37bdeac9": "var start_date = '2019-01-01';\r\nvar end_date =  '2019-12-31';\r\n\r\n// Import LFMC collection\r\nvar collection = ee.ImageCollection('users/kkraoj/lfm-mapper/lfmc_col_25_may_2021')\r\n  .filterDate(start_date,end_date)\r\n\r\nvar image = collection.mean(); //calculate mean for the selected date range\r\nvar palette_lfmc = ['#703103','#945629','#ce7e45', '#df923d', '#f1b555', '#fcd163', '#99b718',\r\n          '#74a901', '#66a000', '#529400', '#3e8601', '#207401', '#056201',\r\n          '#004c00', '#023b01', '#012e01'\r\n          , '#011d01', '#011301'];\r\n\r\nMap.addLayer(image, {min: [50], max: [200], palette: palette_lfmc, opacity: 0.95}, 'LFMC mean');\r\nMap.setCenter(-113.03, 38, 5);", "e8f0bdb6d396570d6dab019de0160826": "// Define a dictionary which will be used to make legend and visualize image on map\nvar dict = {\n  \"names\": [\n    \"Tree Canopy\",\n    \"Grass/Shrubs\",\n    \"Bare Soils\",\n    \"Water\",\n    \"Buildings\",\n    \"Roads\",\n    \"Other Paved\",\n    \"Railroads\"\n  ],\n  \"colors\": [\n    \"#267300\",\n    \"#e9ffbe\",\n    \"#895a44\",\n    \"#006eff\",\n    \"#ff0000\",\n    \"#000000\",\n    \"#686868\",\n    \"#bf00ff\",\n  ]};\n\n// Create a panel to hold the legend widget\nvar legend = ui.Panel({\n  style: {\n    position: 'bottom-left',\n    padding: '8px 15px'\n  }\n});\n\n// Function to generate the legend\nfunction addCategoricalLegend(panel, dict, title) {\n  \n  // Create and add the legend title.\n  var legendTitle = ui.Label({\n    value: title,\n    style: {\n      fontWeight: 'bold',\n      fontSize: '18px',\n      margin: '0 0 4px 0',\n      padding: '0'\n    }\n  });\n  panel.add(legendTitle);\n  \n  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});\n  panel.add(loading);\n  \n  // Creates and styles 1 row of the legend.\n  var makeRow = function(color, name) {\n    // Create the label that is actually the colored box.\n    var colorBox = ui.Label({\n      style: {\n        backgroundColor: color,\n        // Use padding to give the box height and width.\n        padding: '8px',\n        margin: '0 0 4px 0'\n      }\n    });\n  \n    // Create the label filled with the description text.\n    var description = ui.Label({\n      value: name,\n      style: {margin: '0 0 4px 6px'}\n    });\n  \n    return ui.Panel({\n      widgets: [colorBox, description],\n      layout: ui.Panel.Layout.Flow('horizontal')\n    });\n  };\n  \n  // Get the list of palette colors and class names from the image.\n  var palette = dict['colors'];\n  var names = dict['names'];\n  loading.style().set('shown', false);\n  \n  for (var i = 0; i < names.length; i++) {\n    panel.add(makeRow(palette[i], names[i]));\n  }\n  \n  Map.add(panel);\n  \n}\n\n\n/*\n  // Display map and legend ///////////////////////////////////////////////////////////////////////////////\n*/\n\n// Add the legend to the map\naddCategoricalLegend(legend, dict, 'Land cover');\n\n// Add LC image to the map\nMap.addLayer(VT_BaseLC2016, {min:1, max:8, palette:dict['colors']}, 'VT Base LC 2016')\n\n// Center the map on image\n//Map.setCenter(2.047, 45.346, 5)\n\nMap.centerObject(VT_BaseLC2016,10)", "d6d07d10eafabbdcb57c7965f0b984dc": "//Import palette\r\nvar palettes = require('users/gena/packages:palettes')\r\n\r\nMap.addLayer(wacvm_svi,{min: 2.31, max: 85.156, palette: palettes.cmocean.Turbid[7]},'WACVM SVM')\r\nMap.addLayer(wacvm_paci,{min: 10.24, max: 82.370, palette: palettes.cmocean.Amp[7]},'WACVM PACI')\r\nMap.addLayer(wacvm_pei,{min: 0.24, max: 100, palette: palettes.cmocean.Matter[7]},'WACVM PEI')\r\n\r\nMap.setOptions('HYBRID')", "93ec15b58db715aac57cbf34b6d29c8d": "var vis_wa = {\"opacity\":1,\"min\":1,\"max\":99,\"palette\":[\"8400A8\",\"8BAD8B\",\"000080\",\"FFCC99\",\"808000\",\"33CCCC\",\"FFFF96\",\"3366FF\",\"FF99CC\",\"969696\",\"A87000\",\"FF0000\",\"CCFF66\",\"A95CE6\",\"D296E6\",\"A83800\",\"F5A27A\",\"EBC961\",\"28734B\",\"EBDF73\",\"BEFFA6\",\"A6C28C\",\"0A9696\",\"749373\",\"505050\",\"FFFFFF\"]};\nMap.addLayer(wa1975,vis_wa,'West Africa Land Cover USGS 1975')\nMap.addLayer(wa2000,vis_wa,'West Africa Land Cover USGS 2000')\nMap.addLayer(wa2013,vis_wa,'West Africa Land Cover USGS 2013')", "2f94935ff4d43327ae10677f5c08e268": "\r\nvar wfs_evo_palette = ['#1a9850', '#66bd63', '#a6d96a', '#d9ef8b', '#ffffbf', '#fee08b', '#fdae61', '#f46d43', '#d73027']\r\n\r\nMap.addLayer(wsf2015.mosaic(),{'min':255,'max':255},'World Settlement Footprint 2015')\r\nMap.addLayer(wsf2019.mosaic(),{'min':255,'max':255},'World Settlement Footprint 2019')\r\nMap.addLayer(wsf_evo.mosaic(),{'min':1985,'max':2015,'palette':wfs_evo_palette},'World Settlement Footprint Evolution 1985-2015')\r\n\r\nvar Grey\r\n = \r\n[\r\n  {\r\n    \"featureType\": \"administrative.province\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.locality\",\r\n    \"elementType\": \"labels\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"-8\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.locality\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#000000\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.locality\",\r\n    \"elementType\": \"labels.text.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.neighborhood\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#acacac\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.neighborhood\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#484848\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.neighborhood\",\r\n    \"elementType\": \"labels.text.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"color\": \"#ff0000\"\r\n      },\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"administrative.land_parcel\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"-3\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"landscape\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": \"72\"\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"landscape\",\r\n    \"elementType\": \"labels\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"23\"\r\n      },\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"poi\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": \"30\"\r\n      },\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"-19\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"2\"\r\n      },\r\n      {\r\n        \"gamma\": \"1.21\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"geometry.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      },\r\n      {\r\n        \"saturation\": \"15\"\r\n      },\r\n      {\r\n        \"hue\": \"#ff0000\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"labels\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"-43\"\r\n      },\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"labels.text\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"on\"\r\n      },\r\n      {\r\n        \"lightness\": \"22\"\r\n      },\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"weight\": \"0.12\"\r\n      },\r\n      {\r\n        \"lightness\": \"-23\"\r\n      },\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"labels.text.stroke\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      },\r\n      {\r\n        \"lightness\": \"71\"\r\n      }\r\n      ,\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road\",\r\n    \"elementType\": \"labels.icon\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.highway\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": 1\r\n      },\r\n      {\r\n        \"visibility\": \"off\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.arterial\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": 30\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"road.local\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"lightness\": 40\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"transit\",\r\n    \"elementType\": \"all\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": -100\r\n      },\r\n      {\r\n        \"visibility\": \"simplified\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"transit\",\r\n    \"elementType\": \"geometry.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": \"5\"\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      },\r\n      {\r\n        \"lightness\": \"5\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"geometry\",\r\n    \"stylers\": [\r\n      {\r\n        \"hue\": \"#ffff00\"\r\n      },\r\n      {\r\n        \"lightness\": \"-24\"\r\n      },\r\n      {\r\n        \"saturation\": -97\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"geometry.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"saturation\": \"-88\"\r\n      },\r\n      {\r\n        \"lightness\": \"-23\"\r\n      },\r\n      {\r\n        \"visibility\": \"on\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"labels\",\r\n    \"stylers\": [\r\n      {\r\n        \"visibility\": \"on\"\r\n      },\r\n      {\r\n        \"lightness\": -25\r\n      },\r\n      {\r\n        \"saturation\": -100\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"labels.text\",\r\n    \"stylers\": [\r\n      {\r\n        \"weight\": \"0.01\"\r\n      },\r\n      {\r\n        \"lightness\": \"9\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"featureType\": \"water\",\r\n    \"elementType\": \"labels.text.fill\",\r\n    \"stylers\": [\r\n      {\r\n        \"lightness\": \"-32\"\r\n      },\r\n      {\r\n        \"gamma\": \"2.99\"\r\n      }\r\n    ]\r\n  }\r\n]\r\nMap.setOptions('Grey', {Grey: Grey})\r\n", "e9f7fc6b2179651d30c350895da96be6": "print('Collection size',wsf_evo_idc.size())\n\nprint('Band size',wsf_evo_idc.first().bandNames().size())\nprint('Band list b1:1985 to b31:2015',wsf_evo_idc.first().bandNames())\n\nvar palette = ['#d73027','#fc8d59','#fee08b','#d9ef8b','#91cf60','#1a9850']\n\nMap.addLayer(wsf_evo_idc.mosaic().select('b30'),{min:1,max:6,'palette':palette},'B30 IDC')", "9e34fbee9d350b1371f6a8deedcf601b": "\n//Import palette\nvar palettes = require('users/gena/packages:palettes');\n\nMap.addLayer(bedrock_depth.select('b1'),{min:35,max:200,palette:palettes.cmocean.Delta[7]},'Bedrock Depth')\nMap.addLayer(bulk_density.select('b1'),{min:90,max:175,palette:palettes.cmocean.Speed[7]},'Bulk Density Select')\nMap.addLayer(carbon_organic.select('b1'),{min:2,max:32,palette:palettes.cmocean.Haline[7]},'Carbon Organic Select')\nMap.addLayer(carbon_total.select('b1'),{min:1,max:45,palette:palettes.cmocean.Solar[7]},'Carbon total')\nMap.addLayer(cation_exchange_capacity.select('b1'),{min:1,max:40,palette:palettes.cmocean.Gray[7]},'Cation Exchange Capacity')\nMap.addLayer(clay_content.select('b1'),{min:7,max:55,palette:palettes.cmocean.Oxy[7]},'Clay Content')\nMap.addLayer(fertility_capability_classification.select('b1'),{min:5,max:16800,palette:palettes.cmocean.Dense[7]},'Fertility Capability Classification Select')\nMap.addLayer(nitrogen_total.select('b1'),{min:2,max:80,palette:palettes.cmocean.Curl[7]},'Nitrogen Total')\nMap.addLayer(ph.select('b1').divide(10),{min:4,max:9,palette:palettes.cmocean.Algae[7]},'pH')\nMap.addLayer(sand_content.select('b1'),{min:20,max:85,palette:palettes.cmocean.Turbid[7]},'Sand Content')\nMap.addLayer(silt_content.select('b1'),{min:5,max:30,palette:palettes.cmocean.Speed[7]},'Silt Content')\nMap.addLayer(stone_content.select('b1'),{min:2,max:26,palette:palettes.cmocean.Matter[7]},'Stone Content')\nMap.addLayer(texture_class.select('b1'),{min:1,max:10,palette:palettes.cmocean.Balance[7]},'Texture Class')"}